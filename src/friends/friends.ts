/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * BookSharingApi
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  DeleteApiFriendsDeleteParams,
  PostApiFriendsRespondRequestParams,
  PostApiFriendsSendRequestParams
} from '../model'



export const getApiFriendsList = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.get(
      `/api/Friends/list`,options
    );
  }


export const getGetApiFriendsListQueryKey = () => {
    return [`/api/Friends/list`] as const;
    }

    
export const getGetApiFriendsListQueryOptions = <TData = Awaited<ReturnType<typeof getApiFriendsList>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFriendsList>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiFriendsListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiFriendsList>>> = ({ signal }) => getApiFriendsList({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiFriendsList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiFriendsListQueryResult = NonNullable<Awaited<ReturnType<typeof getApiFriendsList>>>
export type GetApiFriendsListQueryError = AxiosError<unknown>


export function useGetApiFriendsList<TData = Awaited<ReturnType<typeof getApiFriendsList>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFriendsList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFriendsList>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiFriendsList<TData = Awaited<ReturnType<typeof getApiFriendsList>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFriendsList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFriendsList>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiFriendsList<TData = Awaited<ReturnType<typeof getApiFriendsList>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFriendsList>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiFriendsList<TData = Awaited<ReturnType<typeof getApiFriendsList>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFriendsList>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiFriendsListQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postApiFriendsSendRequest = (
    params?: PostApiFriendsSendRequestParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.post(
      `/api/Friends/sendRequest`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getPostApiFriendsSendRequestMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiFriendsSendRequest>>, TError,{params?: PostApiFriendsSendRequestParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiFriendsSendRequest>>, TError,{params?: PostApiFriendsSendRequestParams}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiFriendsSendRequest>>, {params?: PostApiFriendsSendRequestParams}> = (props) => {
          const {params} = props ?? {};

          return  postApiFriendsSendRequest(params,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiFriendsSendRequestMutationResult = NonNullable<Awaited<ReturnType<typeof postApiFriendsSendRequest>>>
    
    export type PostApiFriendsSendRequestMutationError = AxiosError<unknown>

    export const usePostApiFriendsSendRequest = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiFriendsSendRequest>>, TError,{params?: PostApiFriendsSendRequestParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiFriendsSendRequest>>,
        TError,
        {params?: PostApiFriendsSendRequestParams},
        TContext
      > => {

      const mutationOptions = getPostApiFriendsSendRequestMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const postApiFriendsRespondRequest = (
    params?: PostApiFriendsRespondRequestParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.post(
      `/api/Friends/respondRequest`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getPostApiFriendsRespondRequestMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiFriendsRespondRequest>>, TError,{params?: PostApiFriendsRespondRequestParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiFriendsRespondRequest>>, TError,{params?: PostApiFriendsRespondRequestParams}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiFriendsRespondRequest>>, {params?: PostApiFriendsRespondRequestParams}> = (props) => {
          const {params} = props ?? {};

          return  postApiFriendsRespondRequest(params,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiFriendsRespondRequestMutationResult = NonNullable<Awaited<ReturnType<typeof postApiFriendsRespondRequest>>>
    
    export type PostApiFriendsRespondRequestMutationError = AxiosError<unknown>

    export const usePostApiFriendsRespondRequest = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiFriendsRespondRequest>>, TError,{params?: PostApiFriendsRespondRequestParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiFriendsRespondRequest>>,
        TError,
        {params?: PostApiFriendsRespondRequestParams},
        TContext
      > => {

      const mutationOptions = getPostApiFriendsRespondRequestMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const getApiFriendsRequestsSent = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.get(
      `/api/Friends/requests/sent`,options
    );
  }


export const getGetApiFriendsRequestsSentQueryKey = () => {
    return [`/api/Friends/requests/sent`] as const;
    }

    
export const getGetApiFriendsRequestsSentQueryOptions = <TData = Awaited<ReturnType<typeof getApiFriendsRequestsSent>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFriendsRequestsSent>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiFriendsRequestsSentQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiFriendsRequestsSent>>> = ({ signal }) => getApiFriendsRequestsSent({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiFriendsRequestsSent>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiFriendsRequestsSentQueryResult = NonNullable<Awaited<ReturnType<typeof getApiFriendsRequestsSent>>>
export type GetApiFriendsRequestsSentQueryError = AxiosError<unknown>


export function useGetApiFriendsRequestsSent<TData = Awaited<ReturnType<typeof getApiFriendsRequestsSent>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFriendsRequestsSent>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFriendsRequestsSent>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiFriendsRequestsSent<TData = Awaited<ReturnType<typeof getApiFriendsRequestsSent>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFriendsRequestsSent>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFriendsRequestsSent>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiFriendsRequestsSent<TData = Awaited<ReturnType<typeof getApiFriendsRequestsSent>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFriendsRequestsSent>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiFriendsRequestsSent<TData = Awaited<ReturnType<typeof getApiFriendsRequestsSent>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFriendsRequestsSent>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiFriendsRequestsSentQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApiFriendsRequestsReceived = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.get(
      `/api/Friends/requests/received`,options
    );
  }


export const getGetApiFriendsRequestsReceivedQueryKey = () => {
    return [`/api/Friends/requests/received`] as const;
    }

    
export const getGetApiFriendsRequestsReceivedQueryOptions = <TData = Awaited<ReturnType<typeof getApiFriendsRequestsReceived>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFriendsRequestsReceived>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiFriendsRequestsReceivedQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiFriendsRequestsReceived>>> = ({ signal }) => getApiFriendsRequestsReceived({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiFriendsRequestsReceived>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiFriendsRequestsReceivedQueryResult = NonNullable<Awaited<ReturnType<typeof getApiFriendsRequestsReceived>>>
export type GetApiFriendsRequestsReceivedQueryError = AxiosError<unknown>


export function useGetApiFriendsRequestsReceived<TData = Awaited<ReturnType<typeof getApiFriendsRequestsReceived>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFriendsRequestsReceived>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFriendsRequestsReceived>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiFriendsRequestsReceived<TData = Awaited<ReturnType<typeof getApiFriendsRequestsReceived>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFriendsRequestsReceived>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFriendsRequestsReceived>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiFriendsRequestsReceived<TData = Awaited<ReturnType<typeof getApiFriendsRequestsReceived>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFriendsRequestsReceived>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiFriendsRequestsReceived<TData = Awaited<ReturnType<typeof getApiFriendsRequestsReceived>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFriendsRequestsReceived>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiFriendsRequestsReceivedQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const deleteApiFriendsDelete = (
    params?: DeleteApiFriendsDeleteParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.delete(
      `/api/Friends/delete`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getDeleteApiFriendsDeleteMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiFriendsDelete>>, TError,{params?: DeleteApiFriendsDeleteParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiFriendsDelete>>, TError,{params?: DeleteApiFriendsDeleteParams}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiFriendsDelete>>, {params?: DeleteApiFriendsDeleteParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteApiFriendsDelete(params,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiFriendsDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiFriendsDelete>>>
    
    export type DeleteApiFriendsDeleteMutationError = AxiosError<unknown>

    export const useDeleteApiFriendsDelete = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiFriendsDelete>>, TError,{params?: DeleteApiFriendsDeleteParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiFriendsDelete>>,
        TError,
        {params?: DeleteApiFriendsDeleteParams},
        TContext
      > => {

      const mutationOptions = getDeleteApiFriendsDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    