/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * BookSharingApi
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  PostQueueItemIdEnqueueParams,
  QueueModel
} from '.././model'



export const getQueueItemIdGetQueue = (
    itemId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<QueueModel>> => {
    
    return axios.default.get(
      `/Queue/${itemId}/getQueue`,options
    );
  }


export const getGetQueueItemIdGetQueueQueryKey = (itemId: string,) => {
    return [`/Queue/${itemId}/getQueue`] as const;
    }

    
export const getGetQueueItemIdGetQueueQueryOptions = <TData = Awaited<ReturnType<typeof getQueueItemIdGetQueue>>, TError = AxiosError<unknown>>(itemId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getQueueItemIdGetQueue>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetQueueItemIdGetQueueQueryKey(itemId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getQueueItemIdGetQueue>>> = ({ signal }) => getQueueItemIdGetQueue(itemId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(itemId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getQueueItemIdGetQueue>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetQueueItemIdGetQueueQueryResult = NonNullable<Awaited<ReturnType<typeof getQueueItemIdGetQueue>>>
export type GetQueueItemIdGetQueueQueryError = AxiosError<unknown>


export function useGetQueueItemIdGetQueue<TData = Awaited<ReturnType<typeof getQueueItemIdGetQueue>>, TError = AxiosError<unknown>>(
 itemId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getQueueItemIdGetQueue>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getQueueItemIdGetQueue>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetQueueItemIdGetQueue<TData = Awaited<ReturnType<typeof getQueueItemIdGetQueue>>, TError = AxiosError<unknown>>(
 itemId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getQueueItemIdGetQueue>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getQueueItemIdGetQueue>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetQueueItemIdGetQueue<TData = Awaited<ReturnType<typeof getQueueItemIdGetQueue>>, TError = AxiosError<unknown>>(
 itemId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getQueueItemIdGetQueue>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetQueueItemIdGetQueue<TData = Awaited<ReturnType<typeof getQueueItemIdGetQueue>>, TError = AxiosError<unknown>>(
 itemId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getQueueItemIdGetQueue>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetQueueItemIdGetQueueQueryOptions(itemId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postQueueItemIdEnqueue = (
    itemId: string,
    params?: PostQueueItemIdEnqueueParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.post(
      `/Queue/${itemId}/enqueue`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getPostQueueItemIdEnqueueMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postQueueItemIdEnqueue>>, TError,{itemId: string;params?: PostQueueItemIdEnqueueParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postQueueItemIdEnqueue>>, TError,{itemId: string;params?: PostQueueItemIdEnqueueParams}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postQueueItemIdEnqueue>>, {itemId: string;params?: PostQueueItemIdEnqueueParams}> = (props) => {
          const {itemId,params} = props ?? {};

          return  postQueueItemIdEnqueue(itemId,params,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostQueueItemIdEnqueueMutationResult = NonNullable<Awaited<ReturnType<typeof postQueueItemIdEnqueue>>>
    
    export type PostQueueItemIdEnqueueMutationError = AxiosError<unknown>

    export const usePostQueueItemIdEnqueue = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postQueueItemIdEnqueue>>, TError,{itemId: string;params?: PostQueueItemIdEnqueueParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postQueueItemIdEnqueue>>,
        TError,
        {itemId: string;params?: PostQueueItemIdEnqueueParams},
        TContext
      > => {

      const mutationOptions = getPostQueueItemIdEnqueueMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const postQueueItemIdLeaveQueue = (
    itemId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.post(
      `/Queue/${itemId}/leaveQueue`,undefined,options
    );
  }



export const getPostQueueItemIdLeaveQueueMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postQueueItemIdLeaveQueue>>, TError,{itemId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postQueueItemIdLeaveQueue>>, TError,{itemId: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postQueueItemIdLeaveQueue>>, {itemId: string}> = (props) => {
          const {itemId} = props ?? {};

          return  postQueueItemIdLeaveQueue(itemId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostQueueItemIdLeaveQueueMutationResult = NonNullable<Awaited<ReturnType<typeof postQueueItemIdLeaveQueue>>>
    
    export type PostQueueItemIdLeaveQueueMutationError = AxiosError<unknown>

    export const usePostQueueItemIdLeaveQueue = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postQueueItemIdLeaveQueue>>, TError,{itemId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postQueueItemIdLeaveQueue>>,
        TError,
        {itemId: string},
        TContext
      > => {

      const mutationOptions = getPostQueueItemIdLeaveQueueMutationOptions(options);

      return useMutation(mutationOptions);
    }
    