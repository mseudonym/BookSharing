/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * BookSharingApi
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  PostUsersEditProfileBody,
  PostUsersEditProfileParams,
  PostUsersEditUsernameParams,
  UserData,
  UserProfile
} from '.././model'



export const getUsersUserId = (
    userId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserProfile>> => {
    
    return axios.default.get(
      `/Users/${userId}`,options
    );
  }


export const getGetUsersUserIdQueryKey = (userId: string,) => {
    return [`/Users/${userId}`] as const;
    }

    
export const getGetUsersUserIdQueryOptions = <TData = Awaited<ReturnType<typeof getUsersUserId>>, TError = AxiosError<unknown>>(userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersUserId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersUserIdQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersUserId>>> = ({ signal }) => getUsersUserId(userId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUsersUserId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUsersUserIdQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersUserId>>>
export type GetUsersUserIdQueryError = AxiosError<unknown>


export function useGetUsersUserId<TData = Awaited<ReturnType<typeof getUsersUserId>>, TError = AxiosError<unknown>>(
 userId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersUserId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersUserId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUsersUserId<TData = Awaited<ReturnType<typeof getUsersUserId>>, TError = AxiosError<unknown>>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersUserId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersUserId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUsersUserId<TData = Awaited<ReturnType<typeof getUsersUserId>>, TError = AxiosError<unknown>>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersUserId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetUsersUserId<TData = Awaited<ReturnType<typeof getUsersUserId>>, TError = AxiosError<unknown>>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersUserId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUsersUserIdQueryOptions(userId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getUsersMe = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserData>> => {
    
    return axios.default.get(
      `/Users/me`,options
    );
  }


export const getGetUsersMeQueryKey = () => {
    return [`/Users/me`] as const;
    }

    
export const getGetUsersMeQueryOptions = <TData = Awaited<ReturnType<typeof getUsersMe>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersMe>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersMeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersMe>>> = ({ signal }) => getUsersMe({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUsersMe>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUsersMeQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersMe>>>
export type GetUsersMeQueryError = AxiosError<unknown>


export function useGetUsersMe<TData = Awaited<ReturnType<typeof getUsersMe>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersMe>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersMe>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUsersMe<TData = Awaited<ReturnType<typeof getUsersMe>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersMe>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersMe>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUsersMe<TData = Awaited<ReturnType<typeof getUsersMe>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersMe>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetUsersMe<TData = Awaited<ReturnType<typeof getUsersMe>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersMe>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUsersMeQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postUsersEditProfile = (
    postUsersEditProfileBody: PostUsersEditProfileBody,
    params?: PostUsersEditProfileParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserData>> => {const formData = new FormData();
if(postUsersEditProfileBody.PhotoFile !== undefined) {
 formData.append('PhotoFile', postUsersEditProfileBody.PhotoFile)
 }

    
    return axios.default.post(
      `/Users/editProfile`,
      formData,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getPostUsersEditProfileMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUsersEditProfile>>, TError,{data: PostUsersEditProfileBody;params?: PostUsersEditProfileParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postUsersEditProfile>>, TError,{data: PostUsersEditProfileBody;params?: PostUsersEditProfileParams}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUsersEditProfile>>, {data: PostUsersEditProfileBody;params?: PostUsersEditProfileParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postUsersEditProfile(data,params,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUsersEditProfileMutationResult = NonNullable<Awaited<ReturnType<typeof postUsersEditProfile>>>
    export type PostUsersEditProfileMutationBody = PostUsersEditProfileBody
    export type PostUsersEditProfileMutationError = AxiosError<unknown>

    export const usePostUsersEditProfile = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUsersEditProfile>>, TError,{data: PostUsersEditProfileBody;params?: PostUsersEditProfileParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postUsersEditProfile>>,
        TError,
        {data: PostUsersEditProfileBody;params?: PostUsersEditProfileParams},
        TContext
      > => {

      const mutationOptions = getPostUsersEditProfileMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const postUsersEditUsername = (
    params?: PostUsersEditUsernameParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<string>> => {
    
    return axios.default.post(
      `/Users/editUsername`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getPostUsersEditUsernameMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUsersEditUsername>>, TError,{params?: PostUsersEditUsernameParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postUsersEditUsername>>, TError,{params?: PostUsersEditUsernameParams}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUsersEditUsername>>, {params?: PostUsersEditUsernameParams}> = (props) => {
          const {params} = props ?? {};

          return  postUsersEditUsername(params,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUsersEditUsernameMutationResult = NonNullable<Awaited<ReturnType<typeof postUsersEditUsername>>>
    
    export type PostUsersEditUsernameMutationError = AxiosError<unknown>

    export const usePostUsersEditUsername = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUsersEditUsername>>, TError,{params?: PostUsersEditUsernameParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postUsersEditUsername>>,
        TError,
        {params?: PostUsersEditUsernameParams},
        TContext
      > => {

      const mutationOptions = getPostUsersEditUsernameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    