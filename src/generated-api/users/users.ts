/**
 * Generated by orval v7.4.1 üç∫
 * Do not edit manually.
 * BookSharingApi
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  PostUsersEditProfileBody,
  PostUsersEditProfileParams,
  PostUsersEditUsernameParams,
  UserData,
  UserProfile
} from '.././model'
import { api } from '../../services/api';
import type { ErrorType, BodyType } from '../../services/api';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const getUsersUserId = (
    userId: string,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<UserProfile>(
      {url: `/Users/${userId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetUsersUserIdQueryKey = (userId: string,) => {
    return [`/Users/${userId}`] as const;
    }

    
export const getGetUsersUserIdQueryOptions = <TData = Awaited<ReturnType<typeof getUsersUserId>>, TError = ErrorType<unknown>>(userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersUserId>>, TError, TData>>, request?: SecondParameter<typeof api>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersUserIdQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersUserId>>> = ({ signal }) => getUsersUserId(userId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUsersUserId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUsersUserIdQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersUserId>>>
export type GetUsersUserIdQueryError = ErrorType<unknown>


export function useGetUsersUserId<TData = Awaited<ReturnType<typeof getUsersUserId>>, TError = ErrorType<unknown>>(
 userId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersUserId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersUserId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUsersUserId<TData = Awaited<ReturnType<typeof getUsersUserId>>, TError = ErrorType<unknown>>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersUserId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersUserId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUsersUserId<TData = Awaited<ReturnType<typeof getUsersUserId>>, TError = ErrorType<unknown>>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersUserId>>, TError, TData>>, request?: SecondParameter<typeof api>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetUsersUserId<TData = Awaited<ReturnType<typeof getUsersUserId>>, TError = ErrorType<unknown>>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersUserId>>, TError, TData>>, request?: SecondParameter<typeof api>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUsersUserIdQueryOptions(userId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getUsersUsername = (
    username: string,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<UserProfile>(
      {url: `/Users/${username}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetUsersUsernameQueryKey = (username: string,) => {
    return [`/Users/${username}`] as const;
    }

    
export const getGetUsersUsernameQueryOptions = <TData = Awaited<ReturnType<typeof getUsersUsername>>, TError = ErrorType<unknown>>(username: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersUsername>>, TError, TData>>, request?: SecondParameter<typeof api>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersUsernameQueryKey(username);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersUsername>>> = ({ signal }) => getUsersUsername(username, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(username), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUsersUsername>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUsersUsernameQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersUsername>>>
export type GetUsersUsernameQueryError = ErrorType<unknown>


export function useGetUsersUsername<TData = Awaited<ReturnType<typeof getUsersUsername>>, TError = ErrorType<unknown>>(
 username: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersUsername>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersUsername>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUsersUsername<TData = Awaited<ReturnType<typeof getUsersUsername>>, TError = ErrorType<unknown>>(
 username: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersUsername>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersUsername>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUsersUsername<TData = Awaited<ReturnType<typeof getUsersUsername>>, TError = ErrorType<unknown>>(
 username: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersUsername>>, TError, TData>>, request?: SecondParameter<typeof api>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetUsersUsername<TData = Awaited<ReturnType<typeof getUsersUsername>>, TError = ErrorType<unknown>>(
 username: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersUsername>>, TError, TData>>, request?: SecondParameter<typeof api>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUsersUsernameQueryOptions(username,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getUsersMe = (
    
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<UserData>(
      {url: `/Users/me`, method: 'GET', signal
    },
      options);
    }
  

export const getGetUsersMeQueryKey = () => {
    return [`/Users/me`] as const;
    }

    
export const getGetUsersMeQueryOptions = <TData = Awaited<ReturnType<typeof getUsersMe>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersMe>>, TError, TData>>, request?: SecondParameter<typeof api>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersMeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersMe>>> = ({ signal }) => getUsersMe(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUsersMe>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUsersMeQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersMe>>>
export type GetUsersMeQueryError = ErrorType<unknown>


export function useGetUsersMe<TData = Awaited<ReturnType<typeof getUsersMe>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersMe>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersMe>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUsersMe<TData = Awaited<ReturnType<typeof getUsersMe>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersMe>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersMe>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUsersMe<TData = Awaited<ReturnType<typeof getUsersMe>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersMe>>, TError, TData>>, request?: SecondParameter<typeof api>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetUsersMe<TData = Awaited<ReturnType<typeof getUsersMe>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersMe>>, TError, TData>>, request?: SecondParameter<typeof api>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUsersMeQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postUsersEditProfile = (
    postUsersEditProfileBody: BodyType<PostUsersEditProfileBody>,
    params?: PostUsersEditProfileParams,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      const formData = new FormData();
if(postUsersEditProfileBody.PhotoFile !== undefined) {
 formData.append('PhotoFile', postUsersEditProfileBody.PhotoFile)
 }

      return api<UserData>(
      {url: `/Users/editProfile`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData,
        params, signal
    },
      options);
    }
  


export const getPostUsersEditProfileMutationOptions = <TData = Awaited<ReturnType<typeof postUsersEditProfile>>, TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: BodyType<PostUsersEditProfileBody>;params?: PostUsersEditProfileParams}, TContext>, request?: SecondParameter<typeof api>}
) => {
const mutationKey = ['postUsersEditProfile'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUsersEditProfile>>, {data: BodyType<PostUsersEditProfileBody>;params?: PostUsersEditProfileParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postUsersEditProfile(data,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: BodyType<PostUsersEditProfileBody>;params?: PostUsersEditProfileParams}, TContext>}

    export type PostUsersEditProfileMutationResult = NonNullable<Awaited<ReturnType<typeof postUsersEditProfile>>>
    export type PostUsersEditProfileMutationBody = BodyType<PostUsersEditProfileBody>
    export type PostUsersEditProfileMutationError = ErrorType<unknown>

    export const usePostUsersEditProfile = <TData = Awaited<ReturnType<typeof postUsersEditProfile>>, TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: BodyType<PostUsersEditProfileBody>;params?: PostUsersEditProfileParams}, TContext>, request?: SecondParameter<typeof api>}
): UseMutationResult<
        TData,
        TError,
        {data: BodyType<PostUsersEditProfileBody>;params?: PostUsersEditProfileParams},
        TContext
      > => {

      const mutationOptions = getPostUsersEditProfileMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const postUsersEditUsername = (
    params?: PostUsersEditUsernameParams,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<string>(
      {url: `/Users/editUsername`, method: 'POST',
        params, signal
    },
      options);
    }
  


export const getPostUsersEditUsernameMutationOptions = <TData = Awaited<ReturnType<typeof postUsersEditUsername>>, TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{params?: PostUsersEditUsernameParams}, TContext>, request?: SecondParameter<typeof api>}
) => {
const mutationKey = ['postUsersEditUsername'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUsersEditUsername>>, {params?: PostUsersEditUsernameParams}> = (props) => {
          const {params} = props ?? {};

          return  postUsersEditUsername(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{params?: PostUsersEditUsernameParams}, TContext>}

    export type PostUsersEditUsernameMutationResult = NonNullable<Awaited<ReturnType<typeof postUsersEditUsername>>>
    
    export type PostUsersEditUsernameMutationError = ErrorType<unknown>

    export const usePostUsersEditUsername = <TData = Awaited<ReturnType<typeof postUsersEditUsername>>, TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{params?: PostUsersEditUsernameParams}, TContext>, request?: SecondParameter<typeof api>}
): UseMutationResult<
        TData,
        TError,
        {params?: PostUsersEditUsernameParams},
        TContext
      > => {

      const mutationOptions = getPostUsersEditUsernameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    