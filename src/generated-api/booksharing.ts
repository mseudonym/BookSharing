/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * BookSharingApi
 * OpenAPI spec version: v1
 */
import * as axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
export type PostUsersEditUsernameParams = {
newUsername?: string;
};

export type PostUsersEditProfileBody = {
  PhotoFile?: Blob;
};

export type PostUsersEditProfileParams = {
FirstName?: string;
LastName?: string;
ContactUrl?: string;
};

export type DeleteApiFriendsDeleteParams = {
personToDeleteId?: string;
};

export type PostApiFriendsRespondRequestParams = {
personToRespondId?: string;
isAccepted?: boolean;
};

export type PostApiFriendsSendRequestParams = {
personToSendId?: string;
};

export type MapIdentityApiConfirmEmailParams = {
userId?: string;
code?: string;
changedEmail?: string;
};

export type PostLoginParams = {
useCookies?: boolean;
useSessionCookies?: boolean;
};

export interface TwoFactorResponse {
  isMachineRemembered?: boolean;
  isTwoFactorEnabled?: boolean;
  /** @nullable */
  recoveryCodes?: string[] | null;
  recoveryCodesLeft?: number;
  /** @nullable */
  sharedKey?: string | null;
}

export interface TwoFactorRequest {
  /** @nullable */
  enable?: boolean | null;
  forgetMachine?: boolean;
  resetRecoveryCodes?: boolean;
  resetSharedKey?: boolean;
  /** @nullable */
  twoFactorCode?: string | null;
}

export interface ResetPasswordRequest {
  /** @nullable */
  email?: string | null;
  /** @nullable */
  newPassword?: string | null;
  /** @nullable */
  resetCode?: string | null;
}

export interface ResendConfirmationEmailRequest {
  /** @nullable */
  email?: string | null;
}

export interface RegisterRequest {
  /** @nullable */
  email?: string | null;
  /** @nullable */
  password?: string | null;
}

export interface RefreshRequest {
  /** @nullable */
  refreshToken?: string | null;
}

export interface LoginRequest {
  /** @nullable */
  email?: string | null;
  /** @nullable */
  password?: string | null;
  /** @nullable */
  twoFactorCode?: string | null;
  /** @nullable */
  twoFactorRecoveryCode?: string | null;
}

export interface InfoResponse {
  /** @nullable */
  email?: string | null;
  isEmailConfirmed?: boolean;
}

export interface InfoRequest {
  /** @nullable */
  newEmail?: string | null;
  /** @nullable */
  newPassword?: string | null;
  /** @nullable */
  oldPassword?: string | null;
}

/**
 * @nullable
 */
export type HttpValidationProblemDetailsErrors = {[key: string]: string[]} | null;

export interface HttpValidationProblemDetails {
  /** @nullable */
  detail?: string | null;
  /** @nullable */
  errors?: HttpValidationProblemDetailsErrors;
  /** @nullable */
  instance?: string | null;
  /** @nullable */
  status?: number | null;
  /** @nullable */
  title?: string | null;
  /** @nullable */
  type?: string | null;
  [key: string]: unknown;
}

export interface ForgotPasswordRequest {
  /** @nullable */
  email?: string | null;
}

export interface AccessTokenResponse {
  /** @nullable */
  accessToken?: string | null;
  expiresIn?: number;
  /** @nullable */
  refreshToken?: string | null;
  /** @nullable */
  readonly tokenType?: string | null;
}





  export const postRegister = <TData = AxiosResponse<void>>(
    registerRequest: RegisterRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/register`,
      registerRequest,options
    );
  }

export const postLogin = <TData = AxiosResponse<AccessTokenResponse>>(
    loginRequest: LoginRequest,
    params?: PostLoginParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/login`,
      loginRequest,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const postRefresh = <TData = AxiosResponse<AccessTokenResponse>>(
    refreshRequest: RefreshRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/refresh`,
      refreshRequest,options
    );
  }

export const mapIdentityApiConfirmEmail = <TData = AxiosResponse<void>>(
    params?: MapIdentityApiConfirmEmailParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/confirmEmail`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const postResendConfirmationEmail = <TData = AxiosResponse<void>>(
    resendConfirmationEmailRequest: ResendConfirmationEmailRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/resendConfirmationEmail`,
      resendConfirmationEmailRequest,options
    );
  }

export const postForgotPassword = <TData = AxiosResponse<void>>(
    forgotPasswordRequest: ForgotPasswordRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/forgotPassword`,
      forgotPasswordRequest,options
    );
  }

export const postResetPassword = <TData = AxiosResponse<void>>(
    resetPasswordRequest: ResetPasswordRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/resetPassword`,
      resetPasswordRequest,options
    );
  }

export const postManage2fa = <TData = AxiosResponse<TwoFactorResponse>>(
    twoFactorRequest: TwoFactorRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/manage/2fa`,
      twoFactorRequest,options
    );
  }

export const getManageInfo = <TData = AxiosResponse<InfoResponse>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/manage/info`,options
    );
  }

export const postManageInfo = <TData = AxiosResponse<InfoResponse>>(
    infoRequest: InfoRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/manage/info`,
      infoRequest,options
    );
  }

export const getApiFriendsList = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/Friends/list`,options
    );
  }

export const postApiFriendsSendRequest = <TData = AxiosResponse<void>>(
    params?: PostApiFriendsSendRequestParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/api/Friends/sendRequest`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const postApiFriendsRespondRequest = <TData = AxiosResponse<void>>(
    params?: PostApiFriendsRespondRequestParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/api/Friends/respondRequest`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const getApiFriendsRequestsSent = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/Friends/requests/sent`,options
    );
  }

export const getApiFriendsRequestsReceived = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/Friends/requests/received`,options
    );
  }

export const deleteApiFriendsDelete = <TData = AxiosResponse<void>>(
    params?: DeleteApiFriendsDeleteParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.delete(
      `/api/Friends/delete`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const getUsersUserId = <TData = AxiosResponse<void>>(
    userId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/Users/${userId}`,options
    );
  }

export const getUsersMe = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/Users/me`,options
    );
  }

export const postUsersEditProfile = <TData = AxiosResponse<void>>(
    postUsersEditProfileBody: PostUsersEditProfileBody,
    params?: PostUsersEditProfileParams, options?: AxiosRequestConfig
 ): Promise<TData> => {const formData = new FormData();
if(postUsersEditProfileBody.PhotoFile !== undefined) {
 formData.append('PhotoFile', postUsersEditProfileBody.PhotoFile)
 }

    return axios.default.post(
      `/Users/editProfile`,
      formData,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const postUsersEditUsername = <TData = AxiosResponse<void>>(
    params?: PostUsersEditUsernameParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/Users/editUsername`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export type PostRegisterResult = AxiosResponse<void>
export type PostLoginResult = AxiosResponse<AccessTokenResponse>
export type PostRefreshResult = AxiosResponse<AccessTokenResponse>
export type MapIdentityApiConfirmEmailResult = AxiosResponse<void>
export type PostResendConfirmationEmailResult = AxiosResponse<void>
export type PostForgotPasswordResult = AxiosResponse<void>
export type PostResetPasswordResult = AxiosResponse<void>
export type PostManage2faResult = AxiosResponse<TwoFactorResponse>
export type GetManageInfoResult = AxiosResponse<InfoResponse>
export type PostManageInfoResult = AxiosResponse<InfoResponse>
export type GetApiFriendsListResult = AxiosResponse<void>
export type PostApiFriendsSendRequestResult = AxiosResponse<void>
export type PostApiFriendsRespondRequestResult = AxiosResponse<void>
export type GetApiFriendsRequestsSentResult = AxiosResponse<void>
export type GetApiFriendsRequestsReceivedResult = AxiosResponse<void>
export type DeleteApiFriendsDeleteResult = AxiosResponse<void>
export type GetUsersUserIdResult = AxiosResponse<void>
export type GetUsersMeResult = AxiosResponse<void>
export type PostUsersEditProfileResult = AxiosResponse<void>
export type PostUsersEditUsernameResult = AxiosResponse<void>
