/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * BookSharingApi
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  DeleteFriendsDeleteParams,
  PostFriendsRespondRequestParams,
  PostFriendsSendRequestParams,
  UserProfile
} from '.././model'



export const getFriendsList = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserProfile[]>> => {
    
    return axios.default.get(
      `/Friends/list`,options
    );
  }


export const getGetFriendsListQueryKey = () => {
    return [`/Friends/list`] as const;
    }

    
export const getGetFriendsListQueryOptions = <TData = Awaited<ReturnType<typeof getFriendsList>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFriendsList>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFriendsListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFriendsList>>> = ({ signal }) => getFriendsList({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFriendsList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetFriendsListQueryResult = NonNullable<Awaited<ReturnType<typeof getFriendsList>>>
export type GetFriendsListQueryError = AxiosError<unknown>


export function useGetFriendsList<TData = Awaited<ReturnType<typeof getFriendsList>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFriendsList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFriendsList>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFriendsList<TData = Awaited<ReturnType<typeof getFriendsList>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFriendsList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFriendsList>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFriendsList<TData = Awaited<ReturnType<typeof getFriendsList>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFriendsList>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetFriendsList<TData = Awaited<ReturnType<typeof getFriendsList>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFriendsList>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetFriendsListQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postFriendsSendRequest = (
    params?: PostFriendsSendRequestParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserProfile>> => {
    
    return axios.default.post(
      `/Friends/sendRequest`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getPostFriendsSendRequestMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postFriendsSendRequest>>, TError,{params?: PostFriendsSendRequestParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postFriendsSendRequest>>, TError,{params?: PostFriendsSendRequestParams}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postFriendsSendRequest>>, {params?: PostFriendsSendRequestParams}> = (props) => {
          const {params} = props ?? {};

          return  postFriendsSendRequest(params,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostFriendsSendRequestMutationResult = NonNullable<Awaited<ReturnType<typeof postFriendsSendRequest>>>
    
    export type PostFriendsSendRequestMutationError = AxiosError<unknown>

    export const usePostFriendsSendRequest = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postFriendsSendRequest>>, TError,{params?: PostFriendsSendRequestParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postFriendsSendRequest>>,
        TError,
        {params?: PostFriendsSendRequestParams},
        TContext
      > => {

      const mutationOptions = getPostFriendsSendRequestMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const postFriendsRespondRequest = (
    params?: PostFriendsRespondRequestParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserProfile>> => {
    
    return axios.default.post(
      `/Friends/respondRequest`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getPostFriendsRespondRequestMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postFriendsRespondRequest>>, TError,{params?: PostFriendsRespondRequestParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postFriendsRespondRequest>>, TError,{params?: PostFriendsRespondRequestParams}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postFriendsRespondRequest>>, {params?: PostFriendsRespondRequestParams}> = (props) => {
          const {params} = props ?? {};

          return  postFriendsRespondRequest(params,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostFriendsRespondRequestMutationResult = NonNullable<Awaited<ReturnType<typeof postFriendsRespondRequest>>>
    
    export type PostFriendsRespondRequestMutationError = AxiosError<unknown>

    export const usePostFriendsRespondRequest = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postFriendsRespondRequest>>, TError,{params?: PostFriendsRespondRequestParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postFriendsRespondRequest>>,
        TError,
        {params?: PostFriendsRespondRequestParams},
        TContext
      > => {

      const mutationOptions = getPostFriendsRespondRequestMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const getFriendsRequestsSent = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserProfile[]>> => {
    
    return axios.default.get(
      `/Friends/requests/sent`,options
    );
  }


export const getGetFriendsRequestsSentQueryKey = () => {
    return [`/Friends/requests/sent`] as const;
    }

    
export const getGetFriendsRequestsSentQueryOptions = <TData = Awaited<ReturnType<typeof getFriendsRequestsSent>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFriendsRequestsSent>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFriendsRequestsSentQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFriendsRequestsSent>>> = ({ signal }) => getFriendsRequestsSent({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFriendsRequestsSent>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetFriendsRequestsSentQueryResult = NonNullable<Awaited<ReturnType<typeof getFriendsRequestsSent>>>
export type GetFriendsRequestsSentQueryError = AxiosError<unknown>


export function useGetFriendsRequestsSent<TData = Awaited<ReturnType<typeof getFriendsRequestsSent>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFriendsRequestsSent>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFriendsRequestsSent>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFriendsRequestsSent<TData = Awaited<ReturnType<typeof getFriendsRequestsSent>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFriendsRequestsSent>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFriendsRequestsSent>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFriendsRequestsSent<TData = Awaited<ReturnType<typeof getFriendsRequestsSent>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFriendsRequestsSent>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetFriendsRequestsSent<TData = Awaited<ReturnType<typeof getFriendsRequestsSent>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFriendsRequestsSent>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetFriendsRequestsSentQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getFriendsRequestsReceived = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserProfile[]>> => {
    
    return axios.default.get(
      `/Friends/requests/received`,options
    );
  }


export const getGetFriendsRequestsReceivedQueryKey = () => {
    return [`/Friends/requests/received`] as const;
    }

    
export const getGetFriendsRequestsReceivedQueryOptions = <TData = Awaited<ReturnType<typeof getFriendsRequestsReceived>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFriendsRequestsReceived>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFriendsRequestsReceivedQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFriendsRequestsReceived>>> = ({ signal }) => getFriendsRequestsReceived({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFriendsRequestsReceived>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetFriendsRequestsReceivedQueryResult = NonNullable<Awaited<ReturnType<typeof getFriendsRequestsReceived>>>
export type GetFriendsRequestsReceivedQueryError = AxiosError<unknown>


export function useGetFriendsRequestsReceived<TData = Awaited<ReturnType<typeof getFriendsRequestsReceived>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFriendsRequestsReceived>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFriendsRequestsReceived>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFriendsRequestsReceived<TData = Awaited<ReturnType<typeof getFriendsRequestsReceived>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFriendsRequestsReceived>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFriendsRequestsReceived>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFriendsRequestsReceived<TData = Awaited<ReturnType<typeof getFriendsRequestsReceived>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFriendsRequestsReceived>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetFriendsRequestsReceived<TData = Awaited<ReturnType<typeof getFriendsRequestsReceived>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFriendsRequestsReceived>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetFriendsRequestsReceivedQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const deleteFriendsDelete = (
    params?: DeleteFriendsDeleteParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserProfile>> => {
    
    return axios.default.delete(
      `/Friends/delete`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getDeleteFriendsDeleteMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteFriendsDelete>>, TError,{params?: DeleteFriendsDeleteParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteFriendsDelete>>, TError,{params?: DeleteFriendsDeleteParams}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteFriendsDelete>>, {params?: DeleteFriendsDeleteParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteFriendsDelete(params,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteFriendsDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteFriendsDelete>>>
    
    export type DeleteFriendsDeleteMutationError = AxiosError<unknown>

    export const useDeleteFriendsDelete = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteFriendsDelete>>, TError,{params?: DeleteFriendsDeleteParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteFriendsDelete>>,
        TError,
        {params?: DeleteFriendsDeleteParams},
        TContext
      > => {

      const mutationOptions = getDeleteFriendsDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    