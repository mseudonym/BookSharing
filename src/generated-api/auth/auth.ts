/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * BookSharingApi
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  AccessTokenResponse,
  ForgotPasswordRequest,
  HttpValidationProblemDetails,
  InfoRequest,
  InfoResponse,
  LoginRequest,
  MapIdentityApiAuthConfirmEmailParams,
  PostAuthLoginParams,
  RefreshRequest,
  RegisterRequest,
  ResendConfirmationEmailRequest,
  ResetPasswordRequest,
  TwoFactorRequest,
  TwoFactorResponse
} from '.././model'



export const postAuthRegister = (
    registerRequest: RegisterRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.post(
      `/Auth/register`,
      registerRequest,options
    );
  }



export const getPostAuthRegisterMutationOptions = <TError = AxiosError<HttpValidationProblemDetails>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthRegister>>, TError,{data: RegisterRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthRegister>>, TError,{data: RegisterRequest}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthRegister>>, {data: RegisterRequest}> = (props) => {
          const {data} = props ?? {};

          return  postAuthRegister(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthRegister>>>
    export type PostAuthRegisterMutationBody = RegisterRequest
    export type PostAuthRegisterMutationError = AxiosError<HttpValidationProblemDetails>

    export const usePostAuthRegister = <TError = AxiosError<HttpValidationProblemDetails>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthRegister>>, TError,{data: RegisterRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postAuthRegister>>,
        TError,
        {data: RegisterRequest},
        TContext
      > => {

      const mutationOptions = getPostAuthRegisterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const postAuthLogin = (
    loginRequest: LoginRequest,
    params?: PostAuthLoginParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AccessTokenResponse>> => {
    
    return axios.default.post(
      `/Auth/login`,
      loginRequest,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getPostAuthLoginMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthLogin>>, TError,{data: LoginRequest;params?: PostAuthLoginParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthLogin>>, TError,{data: LoginRequest;params?: PostAuthLoginParams}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthLogin>>, {data: LoginRequest;params?: PostAuthLoginParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postAuthLogin(data,params,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthLogin>>>
    export type PostAuthLoginMutationBody = LoginRequest
    export type PostAuthLoginMutationError = AxiosError<unknown>

    export const usePostAuthLogin = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthLogin>>, TError,{data: LoginRequest;params?: PostAuthLoginParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postAuthLogin>>,
        TError,
        {data: LoginRequest;params?: PostAuthLoginParams},
        TContext
      > => {

      const mutationOptions = getPostAuthLoginMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const postAuthRefresh = (
    refreshRequest: RefreshRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AccessTokenResponse>> => {
    
    return axios.default.post(
      `/Auth/refresh`,
      refreshRequest,options
    );
  }



export const getPostAuthRefreshMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthRefresh>>, TError,{data: RefreshRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthRefresh>>, TError,{data: RefreshRequest}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthRefresh>>, {data: RefreshRequest}> = (props) => {
          const {data} = props ?? {};

          return  postAuthRefresh(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthRefreshMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthRefresh>>>
    export type PostAuthRefreshMutationBody = RefreshRequest
    export type PostAuthRefreshMutationError = AxiosError<unknown>

    export const usePostAuthRefresh = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthRefresh>>, TError,{data: RefreshRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postAuthRefresh>>,
        TError,
        {data: RefreshRequest},
        TContext
      > => {

      const mutationOptions = getPostAuthRefreshMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const mapIdentityApiAuthConfirmEmail = (
    params?: MapIdentityApiAuthConfirmEmailParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.get(
      `/Auth/confirmEmail`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getMapIdentityApiAuthConfirmEmailQueryKey = (params?: MapIdentityApiAuthConfirmEmailParams,) => {
    return [`/Auth/confirmEmail`, ...(params ? [params]: [])] as const;
    }

    
export const getMapIdentityApiAuthConfirmEmailQueryOptions = <TData = Awaited<ReturnType<typeof mapIdentityApiAuthConfirmEmail>>, TError = AxiosError<unknown>>(params?: MapIdentityApiAuthConfirmEmailParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof mapIdentityApiAuthConfirmEmail>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMapIdentityApiAuthConfirmEmailQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof mapIdentityApiAuthConfirmEmail>>> = ({ signal }) => mapIdentityApiAuthConfirmEmail(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof mapIdentityApiAuthConfirmEmail>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type MapIdentityApiAuthConfirmEmailQueryResult = NonNullable<Awaited<ReturnType<typeof mapIdentityApiAuthConfirmEmail>>>
export type MapIdentityApiAuthConfirmEmailQueryError = AxiosError<unknown>


export function useMapIdentityApiAuthConfirmEmail<TData = Awaited<ReturnType<typeof mapIdentityApiAuthConfirmEmail>>, TError = AxiosError<unknown>>(
 params: undefined |  MapIdentityApiAuthConfirmEmailParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof mapIdentityApiAuthConfirmEmail>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof mapIdentityApiAuthConfirmEmail>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useMapIdentityApiAuthConfirmEmail<TData = Awaited<ReturnType<typeof mapIdentityApiAuthConfirmEmail>>, TError = AxiosError<unknown>>(
 params?: MapIdentityApiAuthConfirmEmailParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof mapIdentityApiAuthConfirmEmail>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof mapIdentityApiAuthConfirmEmail>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useMapIdentityApiAuthConfirmEmail<TData = Awaited<ReturnType<typeof mapIdentityApiAuthConfirmEmail>>, TError = AxiosError<unknown>>(
 params?: MapIdentityApiAuthConfirmEmailParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof mapIdentityApiAuthConfirmEmail>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useMapIdentityApiAuthConfirmEmail<TData = Awaited<ReturnType<typeof mapIdentityApiAuthConfirmEmail>>, TError = AxiosError<unknown>>(
 params?: MapIdentityApiAuthConfirmEmailParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof mapIdentityApiAuthConfirmEmail>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getMapIdentityApiAuthConfirmEmailQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postAuthResendConfirmationEmail = (
    resendConfirmationEmailRequest: ResendConfirmationEmailRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.post(
      `/Auth/resendConfirmationEmail`,
      resendConfirmationEmailRequest,options
    );
  }



export const getPostAuthResendConfirmationEmailMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthResendConfirmationEmail>>, TError,{data: ResendConfirmationEmailRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthResendConfirmationEmail>>, TError,{data: ResendConfirmationEmailRequest}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthResendConfirmationEmail>>, {data: ResendConfirmationEmailRequest}> = (props) => {
          const {data} = props ?? {};

          return  postAuthResendConfirmationEmail(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthResendConfirmationEmailMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthResendConfirmationEmail>>>
    export type PostAuthResendConfirmationEmailMutationBody = ResendConfirmationEmailRequest
    export type PostAuthResendConfirmationEmailMutationError = AxiosError<unknown>

    export const usePostAuthResendConfirmationEmail = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthResendConfirmationEmail>>, TError,{data: ResendConfirmationEmailRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postAuthResendConfirmationEmail>>,
        TError,
        {data: ResendConfirmationEmailRequest},
        TContext
      > => {

      const mutationOptions = getPostAuthResendConfirmationEmailMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const postAuthForgotPassword = (
    forgotPasswordRequest: ForgotPasswordRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.post(
      `/Auth/forgotPassword`,
      forgotPasswordRequest,options
    );
  }



export const getPostAuthForgotPasswordMutationOptions = <TError = AxiosError<HttpValidationProblemDetails>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthForgotPassword>>, TError,{data: ForgotPasswordRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthForgotPassword>>, TError,{data: ForgotPasswordRequest}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthForgotPassword>>, {data: ForgotPasswordRequest}> = (props) => {
          const {data} = props ?? {};

          return  postAuthForgotPassword(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthForgotPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthForgotPassword>>>
    export type PostAuthForgotPasswordMutationBody = ForgotPasswordRequest
    export type PostAuthForgotPasswordMutationError = AxiosError<HttpValidationProblemDetails>

    export const usePostAuthForgotPassword = <TError = AxiosError<HttpValidationProblemDetails>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthForgotPassword>>, TError,{data: ForgotPasswordRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postAuthForgotPassword>>,
        TError,
        {data: ForgotPasswordRequest},
        TContext
      > => {

      const mutationOptions = getPostAuthForgotPasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const postAuthResetPassword = (
    resetPasswordRequest: ResetPasswordRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.post(
      `/Auth/resetPassword`,
      resetPasswordRequest,options
    );
  }



export const getPostAuthResetPasswordMutationOptions = <TError = AxiosError<HttpValidationProblemDetails>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthResetPassword>>, TError,{data: ResetPasswordRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthResetPassword>>, TError,{data: ResetPasswordRequest}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthResetPassword>>, {data: ResetPasswordRequest}> = (props) => {
          const {data} = props ?? {};

          return  postAuthResetPassword(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthResetPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthResetPassword>>>
    export type PostAuthResetPasswordMutationBody = ResetPasswordRequest
    export type PostAuthResetPasswordMutationError = AxiosError<HttpValidationProblemDetails>

    export const usePostAuthResetPassword = <TError = AxiosError<HttpValidationProblemDetails>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthResetPassword>>, TError,{data: ResetPasswordRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postAuthResetPassword>>,
        TError,
        {data: ResetPasswordRequest},
        TContext
      > => {

      const mutationOptions = getPostAuthResetPasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const postAuthManage2fa = (
    twoFactorRequest: TwoFactorRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<TwoFactorResponse>> => {
    
    return axios.default.post(
      `/Auth/manage/2fa`,
      twoFactorRequest,options
    );
  }



export const getPostAuthManage2faMutationOptions = <TError = AxiosError<HttpValidationProblemDetails | void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthManage2fa>>, TError,{data: TwoFactorRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthManage2fa>>, TError,{data: TwoFactorRequest}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthManage2fa>>, {data: TwoFactorRequest}> = (props) => {
          const {data} = props ?? {};

          return  postAuthManage2fa(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthManage2faMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthManage2fa>>>
    export type PostAuthManage2faMutationBody = TwoFactorRequest
    export type PostAuthManage2faMutationError = AxiosError<HttpValidationProblemDetails | void>

    export const usePostAuthManage2fa = <TError = AxiosError<HttpValidationProblemDetails | void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthManage2fa>>, TError,{data: TwoFactorRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postAuthManage2fa>>,
        TError,
        {data: TwoFactorRequest},
        TContext
      > => {

      const mutationOptions = getPostAuthManage2faMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const getAuthManageInfo = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<InfoResponse>> => {
    
    return axios.default.get(
      `/Auth/manage/info`,options
    );
  }


export const getGetAuthManageInfoQueryKey = () => {
    return [`/Auth/manage/info`] as const;
    }

    
export const getGetAuthManageInfoQueryOptions = <TData = Awaited<ReturnType<typeof getAuthManageInfo>>, TError = AxiosError<HttpValidationProblemDetails | void>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthManageInfo>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAuthManageInfoQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuthManageInfo>>> = ({ signal }) => getAuthManageInfo({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAuthManageInfo>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetAuthManageInfoQueryResult = NonNullable<Awaited<ReturnType<typeof getAuthManageInfo>>>
export type GetAuthManageInfoQueryError = AxiosError<HttpValidationProblemDetails | void>


export function useGetAuthManageInfo<TData = Awaited<ReturnType<typeof getAuthManageInfo>>, TError = AxiosError<HttpValidationProblemDetails | void>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthManageInfo>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAuthManageInfo>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAuthManageInfo<TData = Awaited<ReturnType<typeof getAuthManageInfo>>, TError = AxiosError<HttpValidationProblemDetails | void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthManageInfo>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAuthManageInfo>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAuthManageInfo<TData = Awaited<ReturnType<typeof getAuthManageInfo>>, TError = AxiosError<HttpValidationProblemDetails | void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthManageInfo>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetAuthManageInfo<TData = Awaited<ReturnType<typeof getAuthManageInfo>>, TError = AxiosError<HttpValidationProblemDetails | void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthManageInfo>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetAuthManageInfoQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postAuthManageInfo = (
    infoRequest: InfoRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<InfoResponse>> => {
    
    return axios.default.post(
      `/Auth/manage/info`,
      infoRequest,options
    );
  }



export const getPostAuthManageInfoMutationOptions = <TError = AxiosError<HttpValidationProblemDetails | void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthManageInfo>>, TError,{data: InfoRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthManageInfo>>, TError,{data: InfoRequest}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthManageInfo>>, {data: InfoRequest}> = (props) => {
          const {data} = props ?? {};

          return  postAuthManageInfo(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthManageInfoMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthManageInfo>>>
    export type PostAuthManageInfoMutationBody = InfoRequest
    export type PostAuthManageInfoMutationError = AxiosError<HttpValidationProblemDetails | void>

    export const usePostAuthManageInfo = <TError = AxiosError<HttpValidationProblemDetails | void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthManageInfo>>, TError,{data: InfoRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postAuthManageInfo>>,
        TError,
        {data: InfoRequest},
        TContext
      > => {

      const mutationOptions = getPostAuthManageInfoMutationOptions(options);

      return useMutation(mutationOptions);
    }
    