/**
 * Generated by orval v7.4.1 üç∫
 * Do not edit manually.
 * BookSharingApi
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  BookModel,
  PostBooksAddBody
} from '.././model'
import { api } from '../../services/api';
import type { ErrorType, BodyType } from '../../services/api';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const getBooksByIdBookId = (
    bookId: string,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<BookModel>(
      {url: `/Books/byId/${bookId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetBooksByIdBookIdQueryKey = (bookId: string,) => {
    return [`/Books/byId/${bookId}`] as const;
    }

    
export const getGetBooksByIdBookIdQueryOptions = <TData = Awaited<ReturnType<typeof getBooksByIdBookId>>, TError = ErrorType<unknown>>(bookId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksByIdBookId>>, TError, TData>>, request?: SecondParameter<typeof api>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBooksByIdBookIdQueryKey(bookId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBooksByIdBookId>>> = ({ signal }) => getBooksByIdBookId(bookId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(bookId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBooksByIdBookId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetBooksByIdBookIdQueryResult = NonNullable<Awaited<ReturnType<typeof getBooksByIdBookId>>>
export type GetBooksByIdBookIdQueryError = ErrorType<unknown>


export function useGetBooksByIdBookId<TData = Awaited<ReturnType<typeof getBooksByIdBookId>>, TError = ErrorType<unknown>>(
 bookId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksByIdBookId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBooksByIdBookId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBooksByIdBookId<TData = Awaited<ReturnType<typeof getBooksByIdBookId>>, TError = ErrorType<unknown>>(
 bookId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksByIdBookId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBooksByIdBookId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBooksByIdBookId<TData = Awaited<ReturnType<typeof getBooksByIdBookId>>, TError = ErrorType<unknown>>(
 bookId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksByIdBookId>>, TError, TData>>, request?: SecondParameter<typeof api>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetBooksByIdBookId<TData = Awaited<ReturnType<typeof getBooksByIdBookId>>, TError = ErrorType<unknown>>(
 bookId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksByIdBookId>>, TError, TData>>, request?: SecondParameter<typeof api>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetBooksByIdBookIdQueryOptions(bookId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getBooksByTitleTitle = (
    title: string,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<BookModel>(
      {url: `/Books/byTitle/${title}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetBooksByTitleTitleQueryKey = (title: string,) => {
    return [`/Books/byTitle/${title}`] as const;
    }

    
export const getGetBooksByTitleTitleQueryOptions = <TData = Awaited<ReturnType<typeof getBooksByTitleTitle>>, TError = ErrorType<unknown>>(title: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksByTitleTitle>>, TError, TData>>, request?: SecondParameter<typeof api>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBooksByTitleTitleQueryKey(title);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBooksByTitleTitle>>> = ({ signal }) => getBooksByTitleTitle(title, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(title), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBooksByTitleTitle>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetBooksByTitleTitleQueryResult = NonNullable<Awaited<ReturnType<typeof getBooksByTitleTitle>>>
export type GetBooksByTitleTitleQueryError = ErrorType<unknown>


export function useGetBooksByTitleTitle<TData = Awaited<ReturnType<typeof getBooksByTitleTitle>>, TError = ErrorType<unknown>>(
 title: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksByTitleTitle>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBooksByTitleTitle>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBooksByTitleTitle<TData = Awaited<ReturnType<typeof getBooksByTitleTitle>>, TError = ErrorType<unknown>>(
 title: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksByTitleTitle>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBooksByTitleTitle>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBooksByTitleTitle<TData = Awaited<ReturnType<typeof getBooksByTitleTitle>>, TError = ErrorType<unknown>>(
 title: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksByTitleTitle>>, TError, TData>>, request?: SecondParameter<typeof api>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetBooksByTitleTitle<TData = Awaited<ReturnType<typeof getBooksByTitleTitle>>, TError = ErrorType<unknown>>(
 title: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksByTitleTitle>>, TError, TData>>, request?: SecondParameter<typeof api>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetBooksByTitleTitleQueryOptions(title,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getBooksByIsbnIsbn = (
    isbn: string,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<BookModel>(
      {url: `/Books/byIsbn/${isbn}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetBooksByIsbnIsbnQueryKey = (isbn: string,) => {
    return [`/Books/byIsbn/${isbn}`] as const;
    }

    
export const getGetBooksByIsbnIsbnQueryOptions = <TData = Awaited<ReturnType<typeof getBooksByIsbnIsbn>>, TError = ErrorType<unknown>>(isbn: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksByIsbnIsbn>>, TError, TData>>, request?: SecondParameter<typeof api>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBooksByIsbnIsbnQueryKey(isbn);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBooksByIsbnIsbn>>> = ({ signal }) => getBooksByIsbnIsbn(isbn, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(isbn), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBooksByIsbnIsbn>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetBooksByIsbnIsbnQueryResult = NonNullable<Awaited<ReturnType<typeof getBooksByIsbnIsbn>>>
export type GetBooksByIsbnIsbnQueryError = ErrorType<unknown>


export function useGetBooksByIsbnIsbn<TData = Awaited<ReturnType<typeof getBooksByIsbnIsbn>>, TError = ErrorType<unknown>>(
 isbn: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksByIsbnIsbn>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBooksByIsbnIsbn>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBooksByIsbnIsbn<TData = Awaited<ReturnType<typeof getBooksByIsbnIsbn>>, TError = ErrorType<unknown>>(
 isbn: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksByIsbnIsbn>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBooksByIsbnIsbn>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBooksByIsbnIsbn<TData = Awaited<ReturnType<typeof getBooksByIsbnIsbn>>, TError = ErrorType<unknown>>(
 isbn: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksByIsbnIsbn>>, TError, TData>>, request?: SecondParameter<typeof api>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetBooksByIsbnIsbn<TData = Awaited<ReturnType<typeof getBooksByIsbnIsbn>>, TError = ErrorType<unknown>>(
 isbn: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksByIsbnIsbn>>, TError, TData>>, request?: SecondParameter<typeof api>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetBooksByIsbnIsbnQueryOptions(isbn,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postBooksAdd = (
    postBooksAddBody: BodyType<PostBooksAddBody>,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      const formData = new FormData();
formData.append('Title', postBooksAddBody.Title)
formData.append('Author', postBooksAddBody.Author)
formData.append('Description', postBooksAddBody.Description)
if(postBooksAddBody.Isbn !== undefined) {
 formData.append('Isbn', postBooksAddBody.Isbn)
 }
formData.append('Language', postBooksAddBody.Language)
if(postBooksAddBody.BookCover !== undefined) {
 formData.append('BookCover', postBooksAddBody.BookCover)
 }

      return api<BookModel>(
      {url: `/Books/add`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData, signal
    },
      options);
    }
  


export const getPostBooksAddMutationOptions = <TData = Awaited<ReturnType<typeof postBooksAdd>>, TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: BodyType<PostBooksAddBody>}, TContext>, request?: SecondParameter<typeof api>}
) => {
const mutationKey = ['postBooksAdd'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postBooksAdd>>, {data: BodyType<PostBooksAddBody>}> = (props) => {
          const {data} = props ?? {};

          return  postBooksAdd(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: BodyType<PostBooksAddBody>}, TContext>}

    export type PostBooksAddMutationResult = NonNullable<Awaited<ReturnType<typeof postBooksAdd>>>
    export type PostBooksAddMutationBody = BodyType<PostBooksAddBody>
    export type PostBooksAddMutationError = ErrorType<unknown>

    export const usePostBooksAdd = <TData = Awaited<ReturnType<typeof postBooksAdd>>, TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: BodyType<PostBooksAddBody>}, TContext>, request?: SecondParameter<typeof api>}
): UseMutationResult<
        TData,
        TError,
        {data: BodyType<PostBooksAddBody>},
        TContext
      > => {

      const mutationOptions = getPostBooksAddMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const deleteBooksDeleteBookId = (
    bookId: string,
 options?: SecondParameter<typeof api>,) => {
      
      
      return api<void>(
      {url: `/Books/delete/${bookId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteBooksDeleteBookIdMutationOptions = <TData = Awaited<ReturnType<typeof deleteBooksDeleteBookId>>, TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{bookId: string}, TContext>, request?: SecondParameter<typeof api>}
) => {
const mutationKey = ['deleteBooksDeleteBookId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteBooksDeleteBookId>>, {bookId: string}> = (props) => {
          const {bookId} = props ?? {};

          return  deleteBooksDeleteBookId(bookId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{bookId: string}, TContext>}

    export type DeleteBooksDeleteBookIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteBooksDeleteBookId>>>
    
    export type DeleteBooksDeleteBookIdMutationError = ErrorType<unknown>

    export const useDeleteBooksDeleteBookId = <TData = Awaited<ReturnType<typeof deleteBooksDeleteBookId>>, TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{bookId: string}, TContext>, request?: SecondParameter<typeof api>}
): UseMutationResult<
        TData,
        TError,
        {bookId: string},
        TContext
      > => {

      const mutationOptions = getDeleteBooksDeleteBookIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    