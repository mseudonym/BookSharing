/**
 * Generated by orval v7.4.1 üç∫
 * Do not edit manually.
 * BookSharingApi
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  BookModel,
  PostApiBooksAddBody,
  PostApiBooksAddParams
} from '.././model'
import { api } from '../../services/api';
import type { ErrorType, BodyType } from '../../services/api';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const getApiBooksSearchByIdBookId = (
    bookId: string,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<BookModel>(
      {url: `/api/Books/searchById/${bookId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiBooksSearchByIdBookIdQueryKey = (bookId: string,) => {
    return [`/api/Books/searchById/${bookId}`] as const;
    }

    
export const getGetApiBooksSearchByIdBookIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiBooksSearchByIdBookId>>, TError = ErrorType<unknown>>(bookId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiBooksSearchByIdBookId>>, TError, TData>>, request?: SecondParameter<typeof api>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiBooksSearchByIdBookIdQueryKey(bookId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiBooksSearchByIdBookId>>> = ({ signal }) => getApiBooksSearchByIdBookId(bookId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(bookId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiBooksSearchByIdBookId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiBooksSearchByIdBookIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiBooksSearchByIdBookId>>>
export type GetApiBooksSearchByIdBookIdQueryError = ErrorType<unknown>


export function useGetApiBooksSearchByIdBookId<TData = Awaited<ReturnType<typeof getApiBooksSearchByIdBookId>>, TError = ErrorType<unknown>>(
 bookId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiBooksSearchByIdBookId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiBooksSearchByIdBookId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiBooksSearchByIdBookId<TData = Awaited<ReturnType<typeof getApiBooksSearchByIdBookId>>, TError = ErrorType<unknown>>(
 bookId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiBooksSearchByIdBookId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiBooksSearchByIdBookId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiBooksSearchByIdBookId<TData = Awaited<ReturnType<typeof getApiBooksSearchByIdBookId>>, TError = ErrorType<unknown>>(
 bookId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiBooksSearchByIdBookId>>, TError, TData>>, request?: SecondParameter<typeof api>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiBooksSearchByIdBookId<TData = Awaited<ReturnType<typeof getApiBooksSearchByIdBookId>>, TError = ErrorType<unknown>>(
 bookId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiBooksSearchByIdBookId>>, TError, TData>>, request?: SecondParameter<typeof api>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiBooksSearchByIdBookIdQueryOptions(bookId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApiBooksSearchByTitleTitle = (
    title: string,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<BookModel>(
      {url: `/api/Books/searchByTitle/${title}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiBooksSearchByTitleTitleQueryKey = (title: string,) => {
    return [`/api/Books/searchByTitle/${title}`] as const;
    }

    
export const getGetApiBooksSearchByTitleTitleQueryOptions = <TData = Awaited<ReturnType<typeof getApiBooksSearchByTitleTitle>>, TError = ErrorType<unknown>>(title: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiBooksSearchByTitleTitle>>, TError, TData>>, request?: SecondParameter<typeof api>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiBooksSearchByTitleTitleQueryKey(title);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiBooksSearchByTitleTitle>>> = ({ signal }) => getApiBooksSearchByTitleTitle(title, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(title), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiBooksSearchByTitleTitle>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiBooksSearchByTitleTitleQueryResult = NonNullable<Awaited<ReturnType<typeof getApiBooksSearchByTitleTitle>>>
export type GetApiBooksSearchByTitleTitleQueryError = ErrorType<unknown>


export function useGetApiBooksSearchByTitleTitle<TData = Awaited<ReturnType<typeof getApiBooksSearchByTitleTitle>>, TError = ErrorType<unknown>>(
 title: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiBooksSearchByTitleTitle>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiBooksSearchByTitleTitle>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiBooksSearchByTitleTitle<TData = Awaited<ReturnType<typeof getApiBooksSearchByTitleTitle>>, TError = ErrorType<unknown>>(
 title: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiBooksSearchByTitleTitle>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiBooksSearchByTitleTitle>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiBooksSearchByTitleTitle<TData = Awaited<ReturnType<typeof getApiBooksSearchByTitleTitle>>, TError = ErrorType<unknown>>(
 title: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiBooksSearchByTitleTitle>>, TError, TData>>, request?: SecondParameter<typeof api>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiBooksSearchByTitleTitle<TData = Awaited<ReturnType<typeof getApiBooksSearchByTitleTitle>>, TError = ErrorType<unknown>>(
 title: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiBooksSearchByTitleTitle>>, TError, TData>>, request?: SecondParameter<typeof api>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiBooksSearchByTitleTitleQueryOptions(title,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApiBooksSearchByIsbnIsbn = (
    isbn: string,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<BookModel>(
      {url: `/api/Books/searchByIsbn/${isbn}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiBooksSearchByIsbnIsbnQueryKey = (isbn: string,) => {
    return [`/api/Books/searchByIsbn/${isbn}`] as const;
    }

    
export const getGetApiBooksSearchByIsbnIsbnQueryOptions = <TData = Awaited<ReturnType<typeof getApiBooksSearchByIsbnIsbn>>, TError = ErrorType<unknown>>(isbn: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiBooksSearchByIsbnIsbn>>, TError, TData>>, request?: SecondParameter<typeof api>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiBooksSearchByIsbnIsbnQueryKey(isbn);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiBooksSearchByIsbnIsbn>>> = ({ signal }) => getApiBooksSearchByIsbnIsbn(isbn, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(isbn), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiBooksSearchByIsbnIsbn>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiBooksSearchByIsbnIsbnQueryResult = NonNullable<Awaited<ReturnType<typeof getApiBooksSearchByIsbnIsbn>>>
export type GetApiBooksSearchByIsbnIsbnQueryError = ErrorType<unknown>


export function useGetApiBooksSearchByIsbnIsbn<TData = Awaited<ReturnType<typeof getApiBooksSearchByIsbnIsbn>>, TError = ErrorType<unknown>>(
 isbn: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiBooksSearchByIsbnIsbn>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiBooksSearchByIsbnIsbn>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiBooksSearchByIsbnIsbn<TData = Awaited<ReturnType<typeof getApiBooksSearchByIsbnIsbn>>, TError = ErrorType<unknown>>(
 isbn: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiBooksSearchByIsbnIsbn>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiBooksSearchByIsbnIsbn>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiBooksSearchByIsbnIsbn<TData = Awaited<ReturnType<typeof getApiBooksSearchByIsbnIsbn>>, TError = ErrorType<unknown>>(
 isbn: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiBooksSearchByIsbnIsbn>>, TError, TData>>, request?: SecondParameter<typeof api>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiBooksSearchByIsbnIsbn<TData = Awaited<ReturnType<typeof getApiBooksSearchByIsbnIsbn>>, TError = ErrorType<unknown>>(
 isbn: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiBooksSearchByIsbnIsbn>>, TError, TData>>, request?: SecondParameter<typeof api>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiBooksSearchByIsbnIsbnQueryOptions(isbn,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postApiBooksAdd = (
    postApiBooksAddBody: BodyType<PostApiBooksAddBody>,
    params?: PostApiBooksAddParams,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      const formData = new FormData();
if(postApiBooksAddBody.BookCover !== undefined) {
 formData.append('BookCover', postApiBooksAddBody.BookCover)
 }

      return api<BookModel>(
      {url: `/api/Books/add`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData,
        params, signal
    },
      options);
    }
  


export const getPostApiBooksAddMutationOptions = <TData = Awaited<ReturnType<typeof postApiBooksAdd>>, TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: BodyType<PostApiBooksAddBody>;params?: PostApiBooksAddParams}, TContext>, request?: SecondParameter<typeof api>}
) => {
const mutationKey = ['postApiBooksAdd'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiBooksAdd>>, {data: BodyType<PostApiBooksAddBody>;params?: PostApiBooksAddParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postApiBooksAdd(data,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: BodyType<PostApiBooksAddBody>;params?: PostApiBooksAddParams}, TContext>}

    export type PostApiBooksAddMutationResult = NonNullable<Awaited<ReturnType<typeof postApiBooksAdd>>>
    export type PostApiBooksAddMutationBody = BodyType<PostApiBooksAddBody>
    export type PostApiBooksAddMutationError = ErrorType<unknown>

    export const usePostApiBooksAdd = <TData = Awaited<ReturnType<typeof postApiBooksAdd>>, TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: BodyType<PostApiBooksAddBody>;params?: PostApiBooksAddParams}, TContext>, request?: SecondParameter<typeof api>}
): UseMutationResult<
        TData,
        TError,
        {data: BodyType<PostApiBooksAddBody>;params?: PostApiBooksAddParams},
        TContext
      > => {

      const mutationOptions = getPostApiBooksAddMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const deleteApiBooksDeleteBookId = (
    bookId: string,
 options?: SecondParameter<typeof api>,) => {
      
      
      return api<void>(
      {url: `/api/Books/delete/${bookId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteApiBooksDeleteBookIdMutationOptions = <TData = Awaited<ReturnType<typeof deleteApiBooksDeleteBookId>>, TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{bookId: string}, TContext>, request?: SecondParameter<typeof api>}
) => {
const mutationKey = ['deleteApiBooksDeleteBookId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiBooksDeleteBookId>>, {bookId: string}> = (props) => {
          const {bookId} = props ?? {};

          return  deleteApiBooksDeleteBookId(bookId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{bookId: string}, TContext>}

    export type DeleteApiBooksDeleteBookIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiBooksDeleteBookId>>>
    
    export type DeleteApiBooksDeleteBookIdMutationError = ErrorType<unknown>

    export const useDeleteApiBooksDeleteBookId = <TData = Awaited<ReturnType<typeof deleteApiBooksDeleteBookId>>, TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{bookId: string}, TContext>, request?: SecondParameter<typeof api>}
): UseMutationResult<
        TData,
        TError,
        {bookId: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiBooksDeleteBookIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    