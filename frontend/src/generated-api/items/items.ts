/**
 * Generated by orval v7.4.1 üç∫
 * Do not edit manually.
 * BookSharingApi
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery,
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import type {
  FriendItemInfo,
  GetItemsByBookIdParams,
  MyItemInfo,
  PostItemsAddToMyShelfParams,
  QueueModel,
} from '.././model';
import { api } from '../../services/api';
import type { ErrorType } from '../../services/api';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const getItemsMy = (

  options?: SecondParameter<typeof api>, signal?: AbortSignal,
) => {
  return api<MyItemInfo>(
    { url: `/Items/my`, method: 'GET', signal,
    },
    options);
};

export const getGetItemsMyQueryKey = () => {
  return [`/Items/my`] as const;
};

export const getGetItemsMyQueryOptions = <TData = Awaited<ReturnType<typeof getItemsMy>>, TError = ErrorType<unknown>>(options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemsMy>>, TError, TData>>; request?: SecondParameter<typeof api> },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetItemsMyQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getItemsMy>>> = ({ signal }) => getItemsMy(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof getItemsMy>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetItemsMyQueryResult = NonNullable<Awaited<ReturnType<typeof getItemsMy>>>;
export type GetItemsMyQueryError = ErrorType<unknown>;

export function useGetItemsMy<TData = Awaited<ReturnType<typeof getItemsMy>>, TError = ErrorType<unknown>>(
  options: { query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemsMy>>, TError, TData>> & Pick<
    DefinedInitialDataOptions<
      Awaited<ReturnType<typeof getItemsMy>>,
      TError,
      TData
    >, 'initialData'
  >; request?: SecondParameter<typeof api>; }

): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetItemsMy<TData = Awaited<ReturnType<typeof getItemsMy>>, TError = ErrorType<unknown>>(
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemsMy>>, TError, TData>> & Pick<
    UndefinedInitialDataOptions<
      Awaited<ReturnType<typeof getItemsMy>>,
      TError,
      TData
    >, 'initialData'
  >; request?: SecondParameter<typeof api>; }

): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetItemsMy<TData = Awaited<ReturnType<typeof getItemsMy>>, TError = ErrorType<unknown>>(
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemsMy>>, TError, TData>>; request?: SecondParameter<typeof api> }

): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetItemsMy<TData = Awaited<ReturnType<typeof getItemsMy>>, TError = ErrorType<unknown>>(
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemsMy>>, TError, TData>>; request?: SecondParameter<typeof api> },

): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetItemsMyQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getItemsFriends = (

  options?: SecondParameter<typeof api>, signal?: AbortSignal,
) => {
  return api<FriendItemInfo>(
    { url: `/Items/friends`, method: 'GET', signal,
    },
    options);
};

export const getGetItemsFriendsQueryKey = () => {
  return [`/Items/friends`] as const;
};

export const getGetItemsFriendsQueryOptions = <TData = Awaited<ReturnType<typeof getItemsFriends>>, TError = ErrorType<unknown>>(options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemsFriends>>, TError, TData>>; request?: SecondParameter<typeof api> },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetItemsFriendsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getItemsFriends>>> = ({ signal }) => getItemsFriends(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof getItemsFriends>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetItemsFriendsQueryResult = NonNullable<Awaited<ReturnType<typeof getItemsFriends>>>;
export type GetItemsFriendsQueryError = ErrorType<unknown>;

export function useGetItemsFriends<TData = Awaited<ReturnType<typeof getItemsFriends>>, TError = ErrorType<unknown>>(
  options: { query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemsFriends>>, TError, TData>> & Pick<
    DefinedInitialDataOptions<
      Awaited<ReturnType<typeof getItemsFriends>>,
      TError,
      TData
    >, 'initialData'
  >; request?: SecondParameter<typeof api>; }

): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetItemsFriends<TData = Awaited<ReturnType<typeof getItemsFriends>>, TError = ErrorType<unknown>>(
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemsFriends>>, TError, TData>> & Pick<
    UndefinedInitialDataOptions<
      Awaited<ReturnType<typeof getItemsFriends>>,
      TError,
      TData
    >, 'initialData'
  >; request?: SecondParameter<typeof api>; }

): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetItemsFriends<TData = Awaited<ReturnType<typeof getItemsFriends>>, TError = ErrorType<unknown>>(
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemsFriends>>, TError, TData>>; request?: SecondParameter<typeof api> }

): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetItemsFriends<TData = Awaited<ReturnType<typeof getItemsFriends>>, TError = ErrorType<unknown>>(
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemsFriends>>, TError, TData>>; request?: SecondParameter<typeof api> },

): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetItemsFriendsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getItemsByBookId = (
  params?: GetItemsByBookIdParams,
  options?: SecondParameter<typeof api>, signal?: AbortSignal,
) => {
  return api<QueueModel[]>(
    { url: `/Items/byBookId`, method: 'GET',
      params, signal,
    },
    options);
};

export const getGetItemsByBookIdQueryKey = (params?: GetItemsByBookIdParams) => {
  return [`/Items/byBookId`, ...(params ? [params] : [])] as const;
};

export const getGetItemsByBookIdQueryOptions = <TData = Awaited<ReturnType<typeof getItemsByBookId>>, TError = ErrorType<unknown>>(params?: GetItemsByBookIdParams, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemsByBookId>>, TError, TData>>; request?: SecondParameter<typeof api> },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetItemsByBookIdQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getItemsByBookId>>> = ({ signal }) => getItemsByBookId(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof getItemsByBookId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetItemsByBookIdQueryResult = NonNullable<Awaited<ReturnType<typeof getItemsByBookId>>>;
export type GetItemsByBookIdQueryError = ErrorType<unknown>;

export function useGetItemsByBookId<TData = Awaited<ReturnType<typeof getItemsByBookId>>, TError = ErrorType<unknown>>(
  params: undefined | GetItemsByBookIdParams, options: { query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemsByBookId>>, TError, TData>> & Pick<
    DefinedInitialDataOptions<
      Awaited<ReturnType<typeof getItemsByBookId>>,
      TError,
      TData
    >, 'initialData'
  >; request?: SecondParameter<typeof api>; }

): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetItemsByBookId<TData = Awaited<ReturnType<typeof getItemsByBookId>>, TError = ErrorType<unknown>>(
  params?: GetItemsByBookIdParams, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemsByBookId>>, TError, TData>> & Pick<
    UndefinedInitialDataOptions<
      Awaited<ReturnType<typeof getItemsByBookId>>,
      TError,
      TData
    >, 'initialData'
  >; request?: SecondParameter<typeof api>; }

): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetItemsByBookId<TData = Awaited<ReturnType<typeof getItemsByBookId>>, TError = ErrorType<unknown>>(
  params?: GetItemsByBookIdParams, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemsByBookId>>, TError, TData>>; request?: SecondParameter<typeof api> }

): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetItemsByBookId<TData = Awaited<ReturnType<typeof getItemsByBookId>>, TError = ErrorType<unknown>>(
  params?: GetItemsByBookIdParams, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemsByBookId>>, TError, TData>>; request?: SecondParameter<typeof api> },

): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetItemsByBookIdQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postItemsAddToMyShelf = (
  params?: PostItemsAddToMyShelfParams,
  options?: SecondParameter<typeof api>, signal?: AbortSignal,
) => {
  return api<void>(
    { url: `/Items/addToMyShelf`, method: 'POST',
      params, signal,
    },
    options);
};

export const getPostItemsAddToMyShelfMutationOptions = <TData = Awaited<ReturnType<typeof postItemsAddToMyShelf>>, TError = ErrorType<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<TData, TError, { params?: PostItemsAddToMyShelfParams }, TContext>; request?: SecondParameter<typeof api> },
) => {
  const mutationKey = ['postItemsAddToMyShelf'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postItemsAddToMyShelf>>, { params?: PostItemsAddToMyShelfParams }> = (props) => {
    const { params } = props ?? {};

    return postItemsAddToMyShelf(params, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError, { params?: PostItemsAddToMyShelfParams }, TContext>;
};

export type PostItemsAddToMyShelfMutationResult = NonNullable<Awaited<ReturnType<typeof postItemsAddToMyShelf>>>;

export type PostItemsAddToMyShelfMutationError = ErrorType<unknown>;

export const usePostItemsAddToMyShelf = <TData = Awaited<ReturnType<typeof postItemsAddToMyShelf>>, TError = ErrorType<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<TData, TError, { params?: PostItemsAddToMyShelfParams }, TContext>; request?: SecondParameter<typeof api> },
): UseMutationResult<
  TData,
  TError,
  { params?: PostItemsAddToMyShelfParams },
  TContext
> => {
  const mutationOptions = getPostItemsAddToMyShelfMutationOptions(options);

  return useMutation(mutationOptions);
};
