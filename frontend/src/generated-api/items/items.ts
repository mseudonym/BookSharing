/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * BookSharingApi
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  DeleteItemsRemoveFromMyShelfParams,
  FriendItemInfo,
  GetItemsFriendsByBookParams,
  GetItemsMyByBookParams,
  ItemModel,
  MyItemInfo,
  PostItemsAddToMyShelfParams
} from '.././model';

import { api } from '../../services/api';
import type { ErrorType } from '../../services/api';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const getItemsMy = (
    
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<MyItemInfo>(
      {url: `/Items/my`, method: 'GET', signal
    },
      options);
    }
  

export const getGetItemsMyQueryKey = () => {
    return [`/Items/my`] as const;
    }

    
export const getGetItemsMyQueryOptions = <TData = Awaited<ReturnType<typeof getItemsMy>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemsMy>>, TError, TData>>, request?: SecondParameter<typeof api>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetItemsMyQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getItemsMy>>> = ({ signal }) => getItemsMy(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getItemsMy>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetItemsMyQueryResult = NonNullable<Awaited<ReturnType<typeof getItemsMy>>>
export type GetItemsMyQueryError = ErrorType<unknown>


export function useGetItemsMy<TData = Awaited<ReturnType<typeof getItemsMy>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemsMy>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getItemsMy>>,
          TError,
          Awaited<ReturnType<typeof getItemsMy>>
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetItemsMy<TData = Awaited<ReturnType<typeof getItemsMy>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemsMy>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getItemsMy>>,
          TError,
          Awaited<ReturnType<typeof getItemsMy>>
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetItemsMy<TData = Awaited<ReturnType<typeof getItemsMy>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemsMy>>, TError, TData>>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetItemsMy<TData = Awaited<ReturnType<typeof getItemsMy>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemsMy>>, TError, TData>>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetItemsMyQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getItemsFriends = (
    
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<FriendItemInfo>(
      {url: `/Items/friends`, method: 'GET', signal
    },
      options);
    }
  

export const getGetItemsFriendsQueryKey = () => {
    return [`/Items/friends`] as const;
    }

    
export const getGetItemsFriendsQueryOptions = <TData = Awaited<ReturnType<typeof getItemsFriends>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemsFriends>>, TError, TData>>, request?: SecondParameter<typeof api>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetItemsFriendsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getItemsFriends>>> = ({ signal }) => getItemsFriends(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getItemsFriends>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetItemsFriendsQueryResult = NonNullable<Awaited<ReturnType<typeof getItemsFriends>>>
export type GetItemsFriendsQueryError = ErrorType<unknown>


export function useGetItemsFriends<TData = Awaited<ReturnType<typeof getItemsFriends>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemsFriends>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getItemsFriends>>,
          TError,
          Awaited<ReturnType<typeof getItemsFriends>>
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetItemsFriends<TData = Awaited<ReturnType<typeof getItemsFriends>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemsFriends>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getItemsFriends>>,
          TError,
          Awaited<ReturnType<typeof getItemsFriends>>
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetItemsFriends<TData = Awaited<ReturnType<typeof getItemsFriends>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemsFriends>>, TError, TData>>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetItemsFriends<TData = Awaited<ReturnType<typeof getItemsFriends>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemsFriends>>, TError, TData>>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetItemsFriendsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getItemsFriendsByBook = (
    params?: GetItemsFriendsByBookParams,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<ItemModel[]>(
      {url: `/Items/friendsByBook`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetItemsFriendsByBookQueryKey = (params?: GetItemsFriendsByBookParams,) => {
    return [`/Items/friendsByBook`, ...(params ? [params]: [])] as const;
    }

    
export const getGetItemsFriendsByBookQueryOptions = <TData = Awaited<ReturnType<typeof getItemsFriendsByBook>>, TError = ErrorType<unknown>>(params?: GetItemsFriendsByBookParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemsFriendsByBook>>, TError, TData>>, request?: SecondParameter<typeof api>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetItemsFriendsByBookQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getItemsFriendsByBook>>> = ({ signal }) => getItemsFriendsByBook(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getItemsFriendsByBook>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetItemsFriendsByBookQueryResult = NonNullable<Awaited<ReturnType<typeof getItemsFriendsByBook>>>
export type GetItemsFriendsByBookQueryError = ErrorType<unknown>


export function useGetItemsFriendsByBook<TData = Awaited<ReturnType<typeof getItemsFriendsByBook>>, TError = ErrorType<unknown>>(
 params: undefined |  GetItemsFriendsByBookParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemsFriendsByBook>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getItemsFriendsByBook>>,
          TError,
          Awaited<ReturnType<typeof getItemsFriendsByBook>>
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetItemsFriendsByBook<TData = Awaited<ReturnType<typeof getItemsFriendsByBook>>, TError = ErrorType<unknown>>(
 params?: GetItemsFriendsByBookParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemsFriendsByBook>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getItemsFriendsByBook>>,
          TError,
          Awaited<ReturnType<typeof getItemsFriendsByBook>>
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetItemsFriendsByBook<TData = Awaited<ReturnType<typeof getItemsFriendsByBook>>, TError = ErrorType<unknown>>(
 params?: GetItemsFriendsByBookParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemsFriendsByBook>>, TError, TData>>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetItemsFriendsByBook<TData = Awaited<ReturnType<typeof getItemsFriendsByBook>>, TError = ErrorType<unknown>>(
 params?: GetItemsFriendsByBookParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemsFriendsByBook>>, TError, TData>>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetItemsFriendsByBookQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getItemsMyByBook = (
    params?: GetItemsMyByBookParams,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<ItemModel>(
      {url: `/Items/myByBook`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetItemsMyByBookQueryKey = (params?: GetItemsMyByBookParams,) => {
    return [`/Items/myByBook`, ...(params ? [params]: [])] as const;
    }

    
export const getGetItemsMyByBookQueryOptions = <TData = Awaited<ReturnType<typeof getItemsMyByBook>>, TError = ErrorType<unknown>>(params?: GetItemsMyByBookParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemsMyByBook>>, TError, TData>>, request?: SecondParameter<typeof api>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetItemsMyByBookQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getItemsMyByBook>>> = ({ signal }) => getItemsMyByBook(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getItemsMyByBook>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetItemsMyByBookQueryResult = NonNullable<Awaited<ReturnType<typeof getItemsMyByBook>>>
export type GetItemsMyByBookQueryError = ErrorType<unknown>


export function useGetItemsMyByBook<TData = Awaited<ReturnType<typeof getItemsMyByBook>>, TError = ErrorType<unknown>>(
 params: undefined |  GetItemsMyByBookParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemsMyByBook>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getItemsMyByBook>>,
          TError,
          Awaited<ReturnType<typeof getItemsMyByBook>>
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetItemsMyByBook<TData = Awaited<ReturnType<typeof getItemsMyByBook>>, TError = ErrorType<unknown>>(
 params?: GetItemsMyByBookParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemsMyByBook>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getItemsMyByBook>>,
          TError,
          Awaited<ReturnType<typeof getItemsMyByBook>>
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetItemsMyByBook<TData = Awaited<ReturnType<typeof getItemsMyByBook>>, TError = ErrorType<unknown>>(
 params?: GetItemsMyByBookParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemsMyByBook>>, TError, TData>>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetItemsMyByBook<TData = Awaited<ReturnType<typeof getItemsMyByBook>>, TError = ErrorType<unknown>>(
 params?: GetItemsMyByBookParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemsMyByBook>>, TError, TData>>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetItemsMyByBookQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postItemsAddToMyShelf = (
    params?: PostItemsAddToMyShelfParams,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<void>(
      {url: `/Items/addToMyShelf`, method: 'POST',
        params, signal
    },
      options);
    }
  


export const getPostItemsAddToMyShelfMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postItemsAddToMyShelf>>, TError,{params?: PostItemsAddToMyShelfParams}, TContext>, request?: SecondParameter<typeof api>}
): UseMutationOptions<Awaited<ReturnType<typeof postItemsAddToMyShelf>>, TError,{params?: PostItemsAddToMyShelfParams}, TContext> => {

const mutationKey = ['postItemsAddToMyShelf'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postItemsAddToMyShelf>>, {params?: PostItemsAddToMyShelfParams}> = (props) => {
          const {params} = props ?? {};

          return  postItemsAddToMyShelf(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostItemsAddToMyShelfMutationResult = NonNullable<Awaited<ReturnType<typeof postItemsAddToMyShelf>>>
    
    export type PostItemsAddToMyShelfMutationError = ErrorType<unknown>

    export const usePostItemsAddToMyShelf = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postItemsAddToMyShelf>>, TError,{params?: PostItemsAddToMyShelfParams}, TContext>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postItemsAddToMyShelf>>,
        TError,
        {params?: PostItemsAddToMyShelfParams},
        TContext
      > => {

      const mutationOptions = getPostItemsAddToMyShelfMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteItemsRemoveFromMyShelf = (
    params?: DeleteItemsRemoveFromMyShelfParams,
 options?: SecondParameter<typeof api>,) => {
      
      
      return api<void>(
      {url: `/Items/removeFromMyShelf`, method: 'DELETE',
        params
    },
      options);
    }
  


export const getDeleteItemsRemoveFromMyShelfMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteItemsRemoveFromMyShelf>>, TError,{params?: DeleteItemsRemoveFromMyShelfParams}, TContext>, request?: SecondParameter<typeof api>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteItemsRemoveFromMyShelf>>, TError,{params?: DeleteItemsRemoveFromMyShelfParams}, TContext> => {

const mutationKey = ['deleteItemsRemoveFromMyShelf'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteItemsRemoveFromMyShelf>>, {params?: DeleteItemsRemoveFromMyShelfParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteItemsRemoveFromMyShelf(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteItemsRemoveFromMyShelfMutationResult = NonNullable<Awaited<ReturnType<typeof deleteItemsRemoveFromMyShelf>>>
    
    export type DeleteItemsRemoveFromMyShelfMutationError = ErrorType<unknown>

    export const useDeleteItemsRemoveFromMyShelf = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteItemsRemoveFromMyShelf>>, TError,{params?: DeleteItemsRemoveFromMyShelfParams}, TContext>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteItemsRemoveFromMyShelf>>,
        TError,
        {params?: DeleteItemsRemoveFromMyShelfParams},
        TContext
      > => {

      const mutationOptions = getDeleteItemsRemoveFromMyShelfMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    