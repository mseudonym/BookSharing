/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * BookSharingApi
 * OpenAPI spec version: v1
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  PostTestSendEmailBody
} from '.././model';

import { api } from '../../services/api';
import type { ErrorType, BodyType } from '../../services/api';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const postTestSendEmail = (
    postTestSendEmailBody: BodyType<PostTestSendEmailBody>,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      const formData = new FormData();
formData.append('RecipientEmail', postTestSendEmailBody.RecipientEmail)
formData.append('Subject', postTestSendEmailBody.Subject)
formData.append('HtmlFile', postTestSendEmailBody.HtmlFile)

      return api<void>(
      {url: `/Test/sendEmail`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData, signal
    },
      options);
    }
  


export const getPostTestSendEmailMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTestSendEmail>>, TError,{data: BodyType<PostTestSendEmailBody>}, TContext>, request?: SecondParameter<typeof api>}
): UseMutationOptions<Awaited<ReturnType<typeof postTestSendEmail>>, TError,{data: BodyType<PostTestSendEmailBody>}, TContext> => {
    
const mutationKey = ['postTestSendEmail'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTestSendEmail>>, {data: BodyType<PostTestSendEmailBody>}> = (props) => {
          const {data} = props ?? {};

          return  postTestSendEmail(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTestSendEmailMutationResult = NonNullable<Awaited<ReturnType<typeof postTestSendEmail>>>
    export type PostTestSendEmailMutationBody = BodyType<PostTestSendEmailBody>
    export type PostTestSendEmailMutationError = ErrorType<unknown>

    export const usePostTestSendEmail = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTestSendEmail>>, TError,{data: BodyType<PostTestSendEmailBody>}, TContext>, request?: SecondParameter<typeof api>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTestSendEmail>>,
        TError,
        {data: BodyType<PostTestSendEmailBody>},
        TContext
      > => {

      const mutationOptions = getPostTestSendEmailMutationOptions(options);

      return useMutation(mutationOptions);
    }
    