/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * BookSharingApi
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AccessTokenResponse,
  ForgotPasswordRequest,
  HttpValidationProblemDetails,
  InfoRequest,
  InfoResponse,
  LoginRequest,
  MapIdentityApiAuthConfirmEmailParams,
  PostAuthLoginParams,
  RefreshRequest,
  RegisterRequest,
  ResendConfirmationEmailRequest,
  ResetPasswordRequest,
  TwoFactorRequest,
  TwoFactorResponse
} from '.././model';

import { api } from '../../services/api';
import type { ErrorType, BodyType } from '../../services/api';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const postAuthRegister = (
    registerRequest: BodyType<RegisterRequest>,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<void>(
      {url: `/Auth/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: registerRequest, signal
    },
      options);
    }
  


export const getPostAuthRegisterMutationOptions = <TError = ErrorType<HttpValidationProblemDetails>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthRegister>>, TError,{data: BodyType<RegisterRequest>}, TContext>, request?: SecondParameter<typeof api>}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthRegister>>, TError,{data: BodyType<RegisterRequest>}, TContext> => {
    
const mutationKey = ['postAuthRegister'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthRegister>>, {data: BodyType<RegisterRequest>}> = (props) => {
          const {data} = props ?? {};

          return  postAuthRegister(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthRegister>>>
    export type PostAuthRegisterMutationBody = BodyType<RegisterRequest>
    export type PostAuthRegisterMutationError = ErrorType<HttpValidationProblemDetails>

    export const usePostAuthRegister = <TError = ErrorType<HttpValidationProblemDetails>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthRegister>>, TError,{data: BodyType<RegisterRequest>}, TContext>, request?: SecondParameter<typeof api>}
): UseMutationResult<
        Awaited<ReturnType<typeof postAuthRegister>>,
        TError,
        {data: BodyType<RegisterRequest>},
        TContext
      > => {

      const mutationOptions = getPostAuthRegisterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const postAuthLogin = (
    loginRequest: BodyType<LoginRequest>,
    params?: PostAuthLoginParams,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<AccessTokenResponse>(
      {url: `/Auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginRequest,
        params, signal
    },
      options);
    }
  


export const getPostAuthLoginMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthLogin>>, TError,{data: BodyType<LoginRequest>;params?: PostAuthLoginParams}, TContext>, request?: SecondParameter<typeof api>}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthLogin>>, TError,{data: BodyType<LoginRequest>;params?: PostAuthLoginParams}, TContext> => {
    
const mutationKey = ['postAuthLogin'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthLogin>>, {data: BodyType<LoginRequest>;params?: PostAuthLoginParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postAuthLogin(data,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthLogin>>>
    export type PostAuthLoginMutationBody = BodyType<LoginRequest>
    export type PostAuthLoginMutationError = ErrorType<unknown>

    export const usePostAuthLogin = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthLogin>>, TError,{data: BodyType<LoginRequest>;params?: PostAuthLoginParams}, TContext>, request?: SecondParameter<typeof api>}
): UseMutationResult<
        Awaited<ReturnType<typeof postAuthLogin>>,
        TError,
        {data: BodyType<LoginRequest>;params?: PostAuthLoginParams},
        TContext
      > => {

      const mutationOptions = getPostAuthLoginMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const postAuthRefresh = (
    refreshRequest: BodyType<RefreshRequest>,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<AccessTokenResponse>(
      {url: `/Auth/refresh`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: refreshRequest, signal
    },
      options);
    }
  


export const getPostAuthRefreshMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthRefresh>>, TError,{data: BodyType<RefreshRequest>}, TContext>, request?: SecondParameter<typeof api>}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthRefresh>>, TError,{data: BodyType<RefreshRequest>}, TContext> => {
    
const mutationKey = ['postAuthRefresh'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthRefresh>>, {data: BodyType<RefreshRequest>}> = (props) => {
          const {data} = props ?? {};

          return  postAuthRefresh(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthRefreshMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthRefresh>>>
    export type PostAuthRefreshMutationBody = BodyType<RefreshRequest>
    export type PostAuthRefreshMutationError = ErrorType<unknown>

    export const usePostAuthRefresh = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthRefresh>>, TError,{data: BodyType<RefreshRequest>}, TContext>, request?: SecondParameter<typeof api>}
): UseMutationResult<
        Awaited<ReturnType<typeof postAuthRefresh>>,
        TError,
        {data: BodyType<RefreshRequest>},
        TContext
      > => {

      const mutationOptions = getPostAuthRefreshMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const mapIdentityApiAuthConfirmEmail = (
    params: MapIdentityApiAuthConfirmEmailParams,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<void>(
      {url: `/Auth/confirmEmail`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getMapIdentityApiAuthConfirmEmailQueryKey = (params: MapIdentityApiAuthConfirmEmailParams,) => {
    return [`/Auth/confirmEmail`, ...(params ? [params]: [])] as const;
    }

    
export const getMapIdentityApiAuthConfirmEmailQueryOptions = <TData = Awaited<ReturnType<typeof mapIdentityApiAuthConfirmEmail>>, TError = ErrorType<unknown>>(params: MapIdentityApiAuthConfirmEmailParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof mapIdentityApiAuthConfirmEmail>>, TError, TData>>, request?: SecondParameter<typeof api>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMapIdentityApiAuthConfirmEmailQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof mapIdentityApiAuthConfirmEmail>>> = ({ signal }) => mapIdentityApiAuthConfirmEmail(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof mapIdentityApiAuthConfirmEmail>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type MapIdentityApiAuthConfirmEmailQueryResult = NonNullable<Awaited<ReturnType<typeof mapIdentityApiAuthConfirmEmail>>>
export type MapIdentityApiAuthConfirmEmailQueryError = ErrorType<unknown>


export function useMapIdentityApiAuthConfirmEmail<TData = Awaited<ReturnType<typeof mapIdentityApiAuthConfirmEmail>>, TError = ErrorType<unknown>>(
 params: MapIdentityApiAuthConfirmEmailParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof mapIdentityApiAuthConfirmEmail>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof mapIdentityApiAuthConfirmEmail>>,
          TError,
          Awaited<ReturnType<typeof mapIdentityApiAuthConfirmEmail>>
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMapIdentityApiAuthConfirmEmail<TData = Awaited<ReturnType<typeof mapIdentityApiAuthConfirmEmail>>, TError = ErrorType<unknown>>(
 params: MapIdentityApiAuthConfirmEmailParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof mapIdentityApiAuthConfirmEmail>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof mapIdentityApiAuthConfirmEmail>>,
          TError,
          Awaited<ReturnType<typeof mapIdentityApiAuthConfirmEmail>>
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMapIdentityApiAuthConfirmEmail<TData = Awaited<ReturnType<typeof mapIdentityApiAuthConfirmEmail>>, TError = ErrorType<unknown>>(
 params: MapIdentityApiAuthConfirmEmailParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof mapIdentityApiAuthConfirmEmail>>, TError, TData>>, request?: SecondParameter<typeof api>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useMapIdentityApiAuthConfirmEmail<TData = Awaited<ReturnType<typeof mapIdentityApiAuthConfirmEmail>>, TError = ErrorType<unknown>>(
 params: MapIdentityApiAuthConfirmEmailParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof mapIdentityApiAuthConfirmEmail>>, TError, TData>>, request?: SecondParameter<typeof api>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getMapIdentityApiAuthConfirmEmailQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postAuthResendConfirmationEmail = (
    resendConfirmationEmailRequest: BodyType<ResendConfirmationEmailRequest>,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<void>(
      {url: `/Auth/resendConfirmationEmail`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: resendConfirmationEmailRequest, signal
    },
      options);
    }
  


export const getPostAuthResendConfirmationEmailMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthResendConfirmationEmail>>, TError,{data: BodyType<ResendConfirmationEmailRequest>}, TContext>, request?: SecondParameter<typeof api>}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthResendConfirmationEmail>>, TError,{data: BodyType<ResendConfirmationEmailRequest>}, TContext> => {
    
const mutationKey = ['postAuthResendConfirmationEmail'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthResendConfirmationEmail>>, {data: BodyType<ResendConfirmationEmailRequest>}> = (props) => {
          const {data} = props ?? {};

          return  postAuthResendConfirmationEmail(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthResendConfirmationEmailMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthResendConfirmationEmail>>>
    export type PostAuthResendConfirmationEmailMutationBody = BodyType<ResendConfirmationEmailRequest>
    export type PostAuthResendConfirmationEmailMutationError = ErrorType<unknown>

    export const usePostAuthResendConfirmationEmail = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthResendConfirmationEmail>>, TError,{data: BodyType<ResendConfirmationEmailRequest>}, TContext>, request?: SecondParameter<typeof api>}
): UseMutationResult<
        Awaited<ReturnType<typeof postAuthResendConfirmationEmail>>,
        TError,
        {data: BodyType<ResendConfirmationEmailRequest>},
        TContext
      > => {

      const mutationOptions = getPostAuthResendConfirmationEmailMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const postAuthForgotPassword = (
    forgotPasswordRequest: BodyType<ForgotPasswordRequest>,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<void>(
      {url: `/Auth/forgotPassword`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: forgotPasswordRequest, signal
    },
      options);
    }
  


export const getPostAuthForgotPasswordMutationOptions = <TError = ErrorType<HttpValidationProblemDetails>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthForgotPassword>>, TError,{data: BodyType<ForgotPasswordRequest>}, TContext>, request?: SecondParameter<typeof api>}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthForgotPassword>>, TError,{data: BodyType<ForgotPasswordRequest>}, TContext> => {
    
const mutationKey = ['postAuthForgotPassword'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthForgotPassword>>, {data: BodyType<ForgotPasswordRequest>}> = (props) => {
          const {data} = props ?? {};

          return  postAuthForgotPassword(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthForgotPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthForgotPassword>>>
    export type PostAuthForgotPasswordMutationBody = BodyType<ForgotPasswordRequest>
    export type PostAuthForgotPasswordMutationError = ErrorType<HttpValidationProblemDetails>

    export const usePostAuthForgotPassword = <TError = ErrorType<HttpValidationProblemDetails>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthForgotPassword>>, TError,{data: BodyType<ForgotPasswordRequest>}, TContext>, request?: SecondParameter<typeof api>}
): UseMutationResult<
        Awaited<ReturnType<typeof postAuthForgotPassword>>,
        TError,
        {data: BodyType<ForgotPasswordRequest>},
        TContext
      > => {

      const mutationOptions = getPostAuthForgotPasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const postAuthResetPassword = (
    resetPasswordRequest: BodyType<ResetPasswordRequest>,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<void>(
      {url: `/Auth/resetPassword`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: resetPasswordRequest, signal
    },
      options);
    }
  


export const getPostAuthResetPasswordMutationOptions = <TError = ErrorType<HttpValidationProblemDetails>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthResetPassword>>, TError,{data: BodyType<ResetPasswordRequest>}, TContext>, request?: SecondParameter<typeof api>}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthResetPassword>>, TError,{data: BodyType<ResetPasswordRequest>}, TContext> => {
    
const mutationKey = ['postAuthResetPassword'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthResetPassword>>, {data: BodyType<ResetPasswordRequest>}> = (props) => {
          const {data} = props ?? {};

          return  postAuthResetPassword(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthResetPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthResetPassword>>>
    export type PostAuthResetPasswordMutationBody = BodyType<ResetPasswordRequest>
    export type PostAuthResetPasswordMutationError = ErrorType<HttpValidationProblemDetails>

    export const usePostAuthResetPassword = <TError = ErrorType<HttpValidationProblemDetails>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthResetPassword>>, TError,{data: BodyType<ResetPasswordRequest>}, TContext>, request?: SecondParameter<typeof api>}
): UseMutationResult<
        Awaited<ReturnType<typeof postAuthResetPassword>>,
        TError,
        {data: BodyType<ResetPasswordRequest>},
        TContext
      > => {

      const mutationOptions = getPostAuthResetPasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const postAuthManage2fa = (
    twoFactorRequest: BodyType<TwoFactorRequest>,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<TwoFactorResponse>(
      {url: `/Auth/manage/2fa`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: twoFactorRequest, signal
    },
      options);
    }
  


export const getPostAuthManage2faMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthManage2fa>>, TError,{data: BodyType<TwoFactorRequest>}, TContext>, request?: SecondParameter<typeof api>}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthManage2fa>>, TError,{data: BodyType<TwoFactorRequest>}, TContext> => {
    
const mutationKey = ['postAuthManage2fa'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthManage2fa>>, {data: BodyType<TwoFactorRequest>}> = (props) => {
          const {data} = props ?? {};

          return  postAuthManage2fa(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthManage2faMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthManage2fa>>>
    export type PostAuthManage2faMutationBody = BodyType<TwoFactorRequest>
    export type PostAuthManage2faMutationError = ErrorType<HttpValidationProblemDetails | void>

    export const usePostAuthManage2fa = <TError = ErrorType<HttpValidationProblemDetails | void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthManage2fa>>, TError,{data: BodyType<TwoFactorRequest>}, TContext>, request?: SecondParameter<typeof api>}
): UseMutationResult<
        Awaited<ReturnType<typeof postAuthManage2fa>>,
        TError,
        {data: BodyType<TwoFactorRequest>},
        TContext
      > => {

      const mutationOptions = getPostAuthManage2faMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const getAuthManageInfo = (
    
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<InfoResponse>(
      {url: `/Auth/manage/info`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAuthManageInfoQueryKey = () => {
    return [`/Auth/manage/info`] as const;
    }

    
export const getGetAuthManageInfoQueryOptions = <TData = Awaited<ReturnType<typeof getAuthManageInfo>>, TError = ErrorType<HttpValidationProblemDetails | void>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthManageInfo>>, TError, TData>>, request?: SecondParameter<typeof api>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAuthManageInfoQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuthManageInfo>>> = ({ signal }) => getAuthManageInfo(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAuthManageInfo>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAuthManageInfoQueryResult = NonNullable<Awaited<ReturnType<typeof getAuthManageInfo>>>
export type GetAuthManageInfoQueryError = ErrorType<HttpValidationProblemDetails | void>


export function useGetAuthManageInfo<TData = Awaited<ReturnType<typeof getAuthManageInfo>>, TError = ErrorType<HttpValidationProblemDetails | void>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthManageInfo>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAuthManageInfo>>,
          TError,
          Awaited<ReturnType<typeof getAuthManageInfo>>
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAuthManageInfo<TData = Awaited<ReturnType<typeof getAuthManageInfo>>, TError = ErrorType<HttpValidationProblemDetails | void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthManageInfo>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAuthManageInfo>>,
          TError,
          Awaited<ReturnType<typeof getAuthManageInfo>>
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAuthManageInfo<TData = Awaited<ReturnType<typeof getAuthManageInfo>>, TError = ErrorType<HttpValidationProblemDetails | void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthManageInfo>>, TError, TData>>, request?: SecondParameter<typeof api>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAuthManageInfo<TData = Awaited<ReturnType<typeof getAuthManageInfo>>, TError = ErrorType<HttpValidationProblemDetails | void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthManageInfo>>, TError, TData>>, request?: SecondParameter<typeof api>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAuthManageInfoQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postAuthManageInfo = (
    infoRequest: BodyType<InfoRequest>,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<InfoResponse>(
      {url: `/Auth/manage/info`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: infoRequest, signal
    },
      options);
    }
  


export const getPostAuthManageInfoMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthManageInfo>>, TError,{data: BodyType<InfoRequest>}, TContext>, request?: SecondParameter<typeof api>}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthManageInfo>>, TError,{data: BodyType<InfoRequest>}, TContext> => {
    
const mutationKey = ['postAuthManageInfo'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthManageInfo>>, {data: BodyType<InfoRequest>}> = (props) => {
          const {data} = props ?? {};

          return  postAuthManageInfo(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthManageInfoMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthManageInfo>>>
    export type PostAuthManageInfoMutationBody = BodyType<InfoRequest>
    export type PostAuthManageInfoMutationError = ErrorType<HttpValidationProblemDetails | void>

    export const usePostAuthManageInfo = <TError = ErrorType<HttpValidationProblemDetails | void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthManageInfo>>, TError,{data: BodyType<InfoRequest>}, TContext>, request?: SecondParameter<typeof api>}
): UseMutationResult<
        Awaited<ReturnType<typeof postAuthManageInfo>>,
        TError,
        {data: BodyType<InfoRequest>},
        TContext
      > => {

      const mutationOptions = getPostAuthManageInfoMutationOptions(options);

      return useMutation(mutationOptions);
    }
    