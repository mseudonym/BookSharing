/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * BS.Api | v1
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  AccessTokenResponse,
  ChangeEmailRequest,
  ChangePasswordRequest,
  ForgotPasswordRequest,
  HttpValidationProblemDetails,
  InfoResponse,
  LoginRequest,
  PostAuthConfirmEmailParams,
  PostAuthLoginParams,
  RefreshRequest,
  RegisterRequest,
  ResendConfirmationEmailRequest,
  ResetPasswordRequest,
  TwoFactorRequest,
  TwoFactorResponse
} from '.././model';

import { api } from '../../services/api';
import type { ErrorType , BodyType } from '../../services/api';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const postAuthRegister = (
    registerRequest: BodyType<RegisterRequest>,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<void>(
      {url: `/Auth/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: registerRequest, signal
    },
      options);
    }
  


export const getPostAuthRegisterMutationOptions = <TError = ErrorType<HttpValidationProblemDetails>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthRegister>>, TError,{data: BodyType<RegisterRequest>}, TContext>, request?: SecondParameter<typeof api>}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthRegister>>, TError,{data: BodyType<RegisterRequest>}, TContext> => {

const mutationKey = ['postAuthRegister'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthRegister>>, {data: BodyType<RegisterRequest>}> = (props) => {
          const {data} = props ?? {};

          return  postAuthRegister(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthRegister>>>
    export type PostAuthRegisterMutationBody = BodyType<RegisterRequest>
    export type PostAuthRegisterMutationError = ErrorType<HttpValidationProblemDetails>

    export const usePostAuthRegister = <TError = ErrorType<HttpValidationProblemDetails>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthRegister>>, TError,{data: BodyType<RegisterRequest>}, TContext>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAuthRegister>>,
        TError,
        {data: BodyType<RegisterRequest>},
        TContext
      > => {

      const mutationOptions = getPostAuthRegisterMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const postAuthLogin = (
    loginRequest: BodyType<LoginRequest>,
    params?: PostAuthLoginParams,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<AccessTokenResponse>(
      {url: `/Auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginRequest,
        params, signal
    },
      options);
    }
  


export const getPostAuthLoginMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthLogin>>, TError,{data: BodyType<LoginRequest>;params?: PostAuthLoginParams}, TContext>, request?: SecondParameter<typeof api>}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthLogin>>, TError,{data: BodyType<LoginRequest>;params?: PostAuthLoginParams}, TContext> => {

const mutationKey = ['postAuthLogin'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthLogin>>, {data: BodyType<LoginRequest>;params?: PostAuthLoginParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postAuthLogin(data,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthLogin>>>
    export type PostAuthLoginMutationBody = BodyType<LoginRequest>
    export type PostAuthLoginMutationError = ErrorType<unknown>

    export const usePostAuthLogin = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthLogin>>, TError,{data: BodyType<LoginRequest>;params?: PostAuthLoginParams}, TContext>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAuthLogin>>,
        TError,
        {data: BodyType<LoginRequest>;params?: PostAuthLoginParams},
        TContext
      > => {

      const mutationOptions = getPostAuthLoginMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const postAuthRefresh = (
    refreshRequest: BodyType<RefreshRequest>,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<AccessTokenResponse>(
      {url: `/Auth/refresh`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: refreshRequest, signal
    },
      options);
    }
  


export const getPostAuthRefreshMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthRefresh>>, TError,{data: BodyType<RefreshRequest>}, TContext>, request?: SecondParameter<typeof api>}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthRefresh>>, TError,{data: BodyType<RefreshRequest>}, TContext> => {

const mutationKey = ['postAuthRefresh'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthRefresh>>, {data: BodyType<RefreshRequest>}> = (props) => {
          const {data} = props ?? {};

          return  postAuthRefresh(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthRefreshMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthRefresh>>>
    export type PostAuthRefreshMutationBody = BodyType<RefreshRequest>
    export type PostAuthRefreshMutationError = ErrorType<unknown>

    export const usePostAuthRefresh = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthRefresh>>, TError,{data: BodyType<RefreshRequest>}, TContext>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAuthRefresh>>,
        TError,
        {data: BodyType<RefreshRequest>},
        TContext
      > => {

      const mutationOptions = getPostAuthRefreshMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const postAuthConfirmEmail = (
    params: PostAuthConfirmEmailParams,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<void>(
      {url: `/Auth/confirmEmail`, method: 'POST',
        params, signal
    },
      options);
    }
  


export const getPostAuthConfirmEmailMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthConfirmEmail>>, TError,{params: PostAuthConfirmEmailParams}, TContext>, request?: SecondParameter<typeof api>}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthConfirmEmail>>, TError,{params: PostAuthConfirmEmailParams}, TContext> => {

const mutationKey = ['postAuthConfirmEmail'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthConfirmEmail>>, {params: PostAuthConfirmEmailParams}> = (props) => {
          const {params} = props ?? {};

          return  postAuthConfirmEmail(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthConfirmEmailMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthConfirmEmail>>>
    
    export type PostAuthConfirmEmailMutationError = ErrorType<unknown>

    export const usePostAuthConfirmEmail = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthConfirmEmail>>, TError,{params: PostAuthConfirmEmailParams}, TContext>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAuthConfirmEmail>>,
        TError,
        {params: PostAuthConfirmEmailParams},
        TContext
      > => {

      const mutationOptions = getPostAuthConfirmEmailMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const postAuthResendConfirmationEmail = (
    resendConfirmationEmailRequest: BodyType<ResendConfirmationEmailRequest>,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<void>(
      {url: `/Auth/resendConfirmationEmail`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: resendConfirmationEmailRequest, signal
    },
      options);
    }
  


export const getPostAuthResendConfirmationEmailMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthResendConfirmationEmail>>, TError,{data: BodyType<ResendConfirmationEmailRequest>}, TContext>, request?: SecondParameter<typeof api>}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthResendConfirmationEmail>>, TError,{data: BodyType<ResendConfirmationEmailRequest>}, TContext> => {

const mutationKey = ['postAuthResendConfirmationEmail'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthResendConfirmationEmail>>, {data: BodyType<ResendConfirmationEmailRequest>}> = (props) => {
          const {data} = props ?? {};

          return  postAuthResendConfirmationEmail(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthResendConfirmationEmailMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthResendConfirmationEmail>>>
    export type PostAuthResendConfirmationEmailMutationBody = BodyType<ResendConfirmationEmailRequest>
    export type PostAuthResendConfirmationEmailMutationError = ErrorType<unknown>

    export const usePostAuthResendConfirmationEmail = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthResendConfirmationEmail>>, TError,{data: BodyType<ResendConfirmationEmailRequest>}, TContext>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAuthResendConfirmationEmail>>,
        TError,
        {data: BodyType<ResendConfirmationEmailRequest>},
        TContext
      > => {

      const mutationOptions = getPostAuthResendConfirmationEmailMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const postAuthForgotPassword = (
    forgotPasswordRequest: BodyType<ForgotPasswordRequest>,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<void>(
      {url: `/Auth/forgotPassword`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: forgotPasswordRequest, signal
    },
      options);
    }
  


export const getPostAuthForgotPasswordMutationOptions = <TError = ErrorType<HttpValidationProblemDetails>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthForgotPassword>>, TError,{data: BodyType<ForgotPasswordRequest>}, TContext>, request?: SecondParameter<typeof api>}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthForgotPassword>>, TError,{data: BodyType<ForgotPasswordRequest>}, TContext> => {

const mutationKey = ['postAuthForgotPassword'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthForgotPassword>>, {data: BodyType<ForgotPasswordRequest>}> = (props) => {
          const {data} = props ?? {};

          return  postAuthForgotPassword(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthForgotPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthForgotPassword>>>
    export type PostAuthForgotPasswordMutationBody = BodyType<ForgotPasswordRequest>
    export type PostAuthForgotPasswordMutationError = ErrorType<HttpValidationProblemDetails>

    export const usePostAuthForgotPassword = <TError = ErrorType<HttpValidationProblemDetails>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthForgotPassword>>, TError,{data: BodyType<ForgotPasswordRequest>}, TContext>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAuthForgotPassword>>,
        TError,
        {data: BodyType<ForgotPasswordRequest>},
        TContext
      > => {

      const mutationOptions = getPostAuthForgotPasswordMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const postAuthResetPassword = (
    resetPasswordRequest: BodyType<ResetPasswordRequest>,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<void>(
      {url: `/Auth/resetPassword`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: resetPasswordRequest, signal
    },
      options);
    }
  


export const getPostAuthResetPasswordMutationOptions = <TError = ErrorType<HttpValidationProblemDetails>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthResetPassword>>, TError,{data: BodyType<ResetPasswordRequest>}, TContext>, request?: SecondParameter<typeof api>}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthResetPassword>>, TError,{data: BodyType<ResetPasswordRequest>}, TContext> => {

const mutationKey = ['postAuthResetPassword'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthResetPassword>>, {data: BodyType<ResetPasswordRequest>}> = (props) => {
          const {data} = props ?? {};

          return  postAuthResetPassword(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthResetPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthResetPassword>>>
    export type PostAuthResetPasswordMutationBody = BodyType<ResetPasswordRequest>
    export type PostAuthResetPasswordMutationError = ErrorType<HttpValidationProblemDetails>

    export const usePostAuthResetPassword = <TError = ErrorType<HttpValidationProblemDetails>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthResetPassword>>, TError,{data: BodyType<ResetPasswordRequest>}, TContext>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAuthResetPassword>>,
        TError,
        {data: BodyType<ResetPasswordRequest>},
        TContext
      > => {

      const mutationOptions = getPostAuthResetPasswordMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const postAuthManage2fa = (
    twoFactorRequest: BodyType<TwoFactorRequest>,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<TwoFactorResponse>(
      {url: `/Auth/manage/2fa`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: twoFactorRequest, signal
    },
      options);
    }
  


export const getPostAuthManage2faMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthManage2fa>>, TError,{data: BodyType<TwoFactorRequest>}, TContext>, request?: SecondParameter<typeof api>}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthManage2fa>>, TError,{data: BodyType<TwoFactorRequest>}, TContext> => {

const mutationKey = ['postAuthManage2fa'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthManage2fa>>, {data: BodyType<TwoFactorRequest>}> = (props) => {
          const {data} = props ?? {};

          return  postAuthManage2fa(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthManage2faMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthManage2fa>>>
    export type PostAuthManage2faMutationBody = BodyType<TwoFactorRequest>
    export type PostAuthManage2faMutationError = ErrorType<HttpValidationProblemDetails | void>

    export const usePostAuthManage2fa = <TError = ErrorType<HttpValidationProblemDetails | void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthManage2fa>>, TError,{data: BodyType<TwoFactorRequest>}, TContext>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAuthManage2fa>>,
        TError,
        {data: BodyType<TwoFactorRequest>},
        TContext
      > => {

      const mutationOptions = getPostAuthManage2faMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const postAuthManageChangeEmail = (
    changeEmailRequest: BodyType<ChangeEmailRequest>,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<InfoResponse>(
      {url: `/Auth/manage/changeEmail`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: changeEmailRequest, signal
    },
      options);
    }
  


export const getPostAuthManageChangeEmailMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthManageChangeEmail>>, TError,{data: BodyType<ChangeEmailRequest>}, TContext>, request?: SecondParameter<typeof api>}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthManageChangeEmail>>, TError,{data: BodyType<ChangeEmailRequest>}, TContext> => {

const mutationKey = ['postAuthManageChangeEmail'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthManageChangeEmail>>, {data: BodyType<ChangeEmailRequest>}> = (props) => {
          const {data} = props ?? {};

          return  postAuthManageChangeEmail(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthManageChangeEmailMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthManageChangeEmail>>>
    export type PostAuthManageChangeEmailMutationBody = BodyType<ChangeEmailRequest>
    export type PostAuthManageChangeEmailMutationError = ErrorType<HttpValidationProblemDetails | void>

    export const usePostAuthManageChangeEmail = <TError = ErrorType<HttpValidationProblemDetails | void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthManageChangeEmail>>, TError,{data: BodyType<ChangeEmailRequest>}, TContext>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAuthManageChangeEmail>>,
        TError,
        {data: BodyType<ChangeEmailRequest>},
        TContext
      > => {

      const mutationOptions = getPostAuthManageChangeEmailMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const postAuthManageChangePassword = (
    changePasswordRequest: BodyType<ChangePasswordRequest>,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<InfoResponse>(
      {url: `/Auth/manage/changePassword`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: changePasswordRequest, signal
    },
      options);
    }
  


export const getPostAuthManageChangePasswordMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthManageChangePassword>>, TError,{data: BodyType<ChangePasswordRequest>}, TContext>, request?: SecondParameter<typeof api>}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthManageChangePassword>>, TError,{data: BodyType<ChangePasswordRequest>}, TContext> => {

const mutationKey = ['postAuthManageChangePassword'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthManageChangePassword>>, {data: BodyType<ChangePasswordRequest>}> = (props) => {
          const {data} = props ?? {};

          return  postAuthManageChangePassword(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthManageChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthManageChangePassword>>>
    export type PostAuthManageChangePasswordMutationBody = BodyType<ChangePasswordRequest>
    export type PostAuthManageChangePasswordMutationError = ErrorType<HttpValidationProblemDetails | void>

    export const usePostAuthManageChangePassword = <TError = ErrorType<HttpValidationProblemDetails | void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthManageChangePassword>>, TError,{data: BodyType<ChangePasswordRequest>}, TContext>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAuthManageChangePassword>>,
        TError,
        {data: BodyType<ChangePasswordRequest>},
        TContext
      > => {

      const mutationOptions = getPostAuthManageChangePasswordMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    