/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * BS.Api | v1
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  BookModel,
  GetBooksFriendBooksParams,
  PostBooksAddBody
} from '.././model';

import { api } from '../../services/api';
import type { ErrorType , BodyType } from '../../services/api';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const getBooksByIdBookId = (
    bookId: string,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<BookModel>(
      {url: `/Books/byId/${bookId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetBooksByIdBookIdQueryKey = (bookId: string,) => {
    return [`/Books/byId/${bookId}`] as const;
    }

    
export const getGetBooksByIdBookIdQueryOptions = <TData = Awaited<ReturnType<typeof getBooksByIdBookId>>, TError = ErrorType<unknown>>(bookId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksByIdBookId>>, TError, TData>>, request?: SecondParameter<typeof api>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBooksByIdBookIdQueryKey(bookId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBooksByIdBookId>>> = ({ signal }) => getBooksByIdBookId(bookId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(bookId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBooksByIdBookId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetBooksByIdBookIdQueryResult = NonNullable<Awaited<ReturnType<typeof getBooksByIdBookId>>>
export type GetBooksByIdBookIdQueryError = ErrorType<unknown>


export function useGetBooksByIdBookId<TData = Awaited<ReturnType<typeof getBooksByIdBookId>>, TError = ErrorType<unknown>>(
 bookId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksByIdBookId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBooksByIdBookId>>,
          TError,
          Awaited<ReturnType<typeof getBooksByIdBookId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBooksByIdBookId<TData = Awaited<ReturnType<typeof getBooksByIdBookId>>, TError = ErrorType<unknown>>(
 bookId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksByIdBookId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBooksByIdBookId>>,
          TError,
          Awaited<ReturnType<typeof getBooksByIdBookId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBooksByIdBookId<TData = Awaited<ReturnType<typeof getBooksByIdBookId>>, TError = ErrorType<unknown>>(
 bookId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksByIdBookId>>, TError, TData>>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetBooksByIdBookId<TData = Awaited<ReturnType<typeof getBooksByIdBookId>>, TError = ErrorType<unknown>>(
 bookId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksByIdBookId>>, TError, TData>>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetBooksByIdBookIdQueryOptions(bookId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getBooksByTitleTitle = (
    title: string,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<BookModel[]>(
      {url: `/Books/byTitle/${title}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetBooksByTitleTitleQueryKey = (title: string,) => {
    return [`/Books/byTitle/${title}`] as const;
    }

    
export const getGetBooksByTitleTitleQueryOptions = <TData = Awaited<ReturnType<typeof getBooksByTitleTitle>>, TError = ErrorType<unknown>>(title: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksByTitleTitle>>, TError, TData>>, request?: SecondParameter<typeof api>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBooksByTitleTitleQueryKey(title);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBooksByTitleTitle>>> = ({ signal }) => getBooksByTitleTitle(title, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(title), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBooksByTitleTitle>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetBooksByTitleTitleQueryResult = NonNullable<Awaited<ReturnType<typeof getBooksByTitleTitle>>>
export type GetBooksByTitleTitleQueryError = ErrorType<unknown>


export function useGetBooksByTitleTitle<TData = Awaited<ReturnType<typeof getBooksByTitleTitle>>, TError = ErrorType<unknown>>(
 title: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksByTitleTitle>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBooksByTitleTitle>>,
          TError,
          Awaited<ReturnType<typeof getBooksByTitleTitle>>
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBooksByTitleTitle<TData = Awaited<ReturnType<typeof getBooksByTitleTitle>>, TError = ErrorType<unknown>>(
 title: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksByTitleTitle>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBooksByTitleTitle>>,
          TError,
          Awaited<ReturnType<typeof getBooksByTitleTitle>>
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBooksByTitleTitle<TData = Awaited<ReturnType<typeof getBooksByTitleTitle>>, TError = ErrorType<unknown>>(
 title: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksByTitleTitle>>, TError, TData>>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetBooksByTitleTitle<TData = Awaited<ReturnType<typeof getBooksByTitleTitle>>, TError = ErrorType<unknown>>(
 title: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksByTitleTitle>>, TError, TData>>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetBooksByTitleTitleQueryOptions(title,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getBooksByIsbnIsbn = (
    isbn: string,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<BookModel>(
      {url: `/Books/byIsbn/${isbn}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetBooksByIsbnIsbnQueryKey = (isbn: string,) => {
    return [`/Books/byIsbn/${isbn}`] as const;
    }

    
export const getGetBooksByIsbnIsbnQueryOptions = <TData = Awaited<ReturnType<typeof getBooksByIsbnIsbn>>, TError = ErrorType<string>>(isbn: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksByIsbnIsbn>>, TError, TData>>, request?: SecondParameter<typeof api>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBooksByIsbnIsbnQueryKey(isbn);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBooksByIsbnIsbn>>> = ({ signal }) => getBooksByIsbnIsbn(isbn, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(isbn), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBooksByIsbnIsbn>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetBooksByIsbnIsbnQueryResult = NonNullable<Awaited<ReturnType<typeof getBooksByIsbnIsbn>>>
export type GetBooksByIsbnIsbnQueryError = ErrorType<string>


export function useGetBooksByIsbnIsbn<TData = Awaited<ReturnType<typeof getBooksByIsbnIsbn>>, TError = ErrorType<string>>(
 isbn: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksByIsbnIsbn>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBooksByIsbnIsbn>>,
          TError,
          Awaited<ReturnType<typeof getBooksByIsbnIsbn>>
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBooksByIsbnIsbn<TData = Awaited<ReturnType<typeof getBooksByIsbnIsbn>>, TError = ErrorType<string>>(
 isbn: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksByIsbnIsbn>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBooksByIsbnIsbn>>,
          TError,
          Awaited<ReturnType<typeof getBooksByIsbnIsbn>>
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBooksByIsbnIsbn<TData = Awaited<ReturnType<typeof getBooksByIsbnIsbn>>, TError = ErrorType<string>>(
 isbn: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksByIsbnIsbn>>, TError, TData>>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetBooksByIsbnIsbn<TData = Awaited<ReturnType<typeof getBooksByIsbnIsbn>>, TError = ErrorType<string>>(
 isbn: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksByIsbnIsbn>>, TError, TData>>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetBooksByIsbnIsbnQueryOptions(isbn,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postBooksAdd = (
    postBooksAddBody: BodyType<PostBooksAddBody>,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      const formData = new FormData();
if(postBooksAddBody.Title !== undefined) {
 formData.append(`Title`, postBooksAddBody.Title)
 }
if(postBooksAddBody.Author !== undefined) {
 formData.append(`Author`, postBooksAddBody.Author)
 }
if(postBooksAddBody.Description !== undefined) {
 formData.append(`Description`, postBooksAddBody.Description)
 }
if(postBooksAddBody.Isbn !== undefined) {
 formData.append(`Isbn`, postBooksAddBody.Isbn)
 }
if(postBooksAddBody.Language !== undefined) {
 formData.append(`Language`, postBooksAddBody.Language)
 }
if(postBooksAddBody.PublicationYear !== undefined) {
 formData.append(`PublicationYear`, postBooksAddBody.PublicationYear.toString())
 }
if(postBooksAddBody.BookCover !== undefined) {
 formData.append(`BookCover`, postBooksAddBody.BookCover)
 }

      return api<BookModel>(
      {url: `/Books/add`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData, signal
    },
      options);
    }
  


export const getPostBooksAddMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postBooksAdd>>, TError,{data: BodyType<PostBooksAddBody>}, TContext>, request?: SecondParameter<typeof api>}
): UseMutationOptions<Awaited<ReturnType<typeof postBooksAdd>>, TError,{data: BodyType<PostBooksAddBody>}, TContext> => {

const mutationKey = ['postBooksAdd'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postBooksAdd>>, {data: BodyType<PostBooksAddBody>}> = (props) => {
          const {data} = props ?? {};

          return  postBooksAdd(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostBooksAddMutationResult = NonNullable<Awaited<ReturnType<typeof postBooksAdd>>>
    export type PostBooksAddMutationBody = BodyType<PostBooksAddBody>
    export type PostBooksAddMutationError = ErrorType<unknown>

    export const usePostBooksAdd = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postBooksAdd>>, TError,{data: BodyType<PostBooksAddBody>}, TContext>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postBooksAdd>>,
        TError,
        {data: BodyType<PostBooksAddBody>},
        TContext
      > => {

      const mutationOptions = getPostBooksAddMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getBooksAllFriendsBooks = (
    
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<BookModel[]>(
      {url: `/Books/allFriendsBooks`, method: 'GET', signal
    },
      options);
    }
  

export const getGetBooksAllFriendsBooksQueryKey = () => {
    return [`/Books/allFriendsBooks`] as const;
    }

    
export const getGetBooksAllFriendsBooksQueryOptions = <TData = Awaited<ReturnType<typeof getBooksAllFriendsBooks>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksAllFriendsBooks>>, TError, TData>>, request?: SecondParameter<typeof api>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBooksAllFriendsBooksQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBooksAllFriendsBooks>>> = ({ signal }) => getBooksAllFriendsBooks(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBooksAllFriendsBooks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetBooksAllFriendsBooksQueryResult = NonNullable<Awaited<ReturnType<typeof getBooksAllFriendsBooks>>>
export type GetBooksAllFriendsBooksQueryError = ErrorType<unknown>


export function useGetBooksAllFriendsBooks<TData = Awaited<ReturnType<typeof getBooksAllFriendsBooks>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksAllFriendsBooks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBooksAllFriendsBooks>>,
          TError,
          Awaited<ReturnType<typeof getBooksAllFriendsBooks>>
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBooksAllFriendsBooks<TData = Awaited<ReturnType<typeof getBooksAllFriendsBooks>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksAllFriendsBooks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBooksAllFriendsBooks>>,
          TError,
          Awaited<ReturnType<typeof getBooksAllFriendsBooks>>
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBooksAllFriendsBooks<TData = Awaited<ReturnType<typeof getBooksAllFriendsBooks>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksAllFriendsBooks>>, TError, TData>>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetBooksAllFriendsBooks<TData = Awaited<ReturnType<typeof getBooksAllFriendsBooks>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksAllFriendsBooks>>, TError, TData>>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetBooksAllFriendsBooksQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getBooksFriendBooks = (
    params?: GetBooksFriendBooksParams,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<BookModel[]>(
      {url: `/Books/friendBooks`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetBooksFriendBooksQueryKey = (params?: GetBooksFriendBooksParams,) => {
    return [`/Books/friendBooks`, ...(params ? [params]: [])] as const;
    }

    
export const getGetBooksFriendBooksQueryOptions = <TData = Awaited<ReturnType<typeof getBooksFriendBooks>>, TError = ErrorType<unknown>>(params?: GetBooksFriendBooksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksFriendBooks>>, TError, TData>>, request?: SecondParameter<typeof api>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBooksFriendBooksQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBooksFriendBooks>>> = ({ signal }) => getBooksFriendBooks(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBooksFriendBooks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetBooksFriendBooksQueryResult = NonNullable<Awaited<ReturnType<typeof getBooksFriendBooks>>>
export type GetBooksFriendBooksQueryError = ErrorType<unknown>


export function useGetBooksFriendBooks<TData = Awaited<ReturnType<typeof getBooksFriendBooks>>, TError = ErrorType<unknown>>(
 params: undefined |  GetBooksFriendBooksParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksFriendBooks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBooksFriendBooks>>,
          TError,
          Awaited<ReturnType<typeof getBooksFriendBooks>>
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBooksFriendBooks<TData = Awaited<ReturnType<typeof getBooksFriendBooks>>, TError = ErrorType<unknown>>(
 params?: GetBooksFriendBooksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksFriendBooks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBooksFriendBooks>>,
          TError,
          Awaited<ReturnType<typeof getBooksFriendBooks>>
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBooksFriendBooks<TData = Awaited<ReturnType<typeof getBooksFriendBooks>>, TError = ErrorType<unknown>>(
 params?: GetBooksFriendBooksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksFriendBooks>>, TError, TData>>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetBooksFriendBooks<TData = Awaited<ReturnType<typeof getBooksFriendBooks>>, TError = ErrorType<unknown>>(
 params?: GetBooksFriendBooksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksFriendBooks>>, TError, TData>>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetBooksFriendBooksQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getBooksMyBooks = (
    
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<BookModel[]>(
      {url: `/Books/myBooks`, method: 'GET', signal
    },
      options);
    }
  

export const getGetBooksMyBooksQueryKey = () => {
    return [`/Books/myBooks`] as const;
    }

    
export const getGetBooksMyBooksQueryOptions = <TData = Awaited<ReturnType<typeof getBooksMyBooks>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksMyBooks>>, TError, TData>>, request?: SecondParameter<typeof api>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBooksMyBooksQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBooksMyBooks>>> = ({ signal }) => getBooksMyBooks(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBooksMyBooks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetBooksMyBooksQueryResult = NonNullable<Awaited<ReturnType<typeof getBooksMyBooks>>>
export type GetBooksMyBooksQueryError = ErrorType<unknown>


export function useGetBooksMyBooks<TData = Awaited<ReturnType<typeof getBooksMyBooks>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksMyBooks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBooksMyBooks>>,
          TError,
          Awaited<ReturnType<typeof getBooksMyBooks>>
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBooksMyBooks<TData = Awaited<ReturnType<typeof getBooksMyBooks>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksMyBooks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBooksMyBooks>>,
          TError,
          Awaited<ReturnType<typeof getBooksMyBooks>>
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBooksMyBooks<TData = Awaited<ReturnType<typeof getBooksMyBooks>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksMyBooks>>, TError, TData>>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetBooksMyBooks<TData = Awaited<ReturnType<typeof getBooksMyBooks>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooksMyBooks>>, TError, TData>>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetBooksMyBooksQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



