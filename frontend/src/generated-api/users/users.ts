/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * BookSharingApi
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  PostUsersEditProfileBody,
  UserData,
  UserProfile,
  ValidationProblemDetails
} from '.././model';

import { api } from '../../services/api';
import type { ErrorType , BodyType } from '../../services/api';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const getUsersUsername = (
    username: string,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<UserProfile>(
      {url: `/Users/${username}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetUsersUsernameQueryKey = (username: string,) => {
    return [`/Users/${username}`] as const;
    }

    
export const getGetUsersUsernameQueryOptions = <TData = Awaited<ReturnType<typeof getUsersUsername>>, TError = ErrorType<string>>(username: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersUsername>>, TError, TData>>, request?: SecondParameter<typeof api>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersUsernameQueryKey(username);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersUsername>>> = ({ signal }) => getUsersUsername(username, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(username), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUsersUsername>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUsersUsernameQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersUsername>>>
export type GetUsersUsernameQueryError = ErrorType<string>


export function useGetUsersUsername<TData = Awaited<ReturnType<typeof getUsersUsername>>, TError = ErrorType<string>>(
 username: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersUsername>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersUsername>>,
          TError,
          Awaited<ReturnType<typeof getUsersUsername>>
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUsersUsername<TData = Awaited<ReturnType<typeof getUsersUsername>>, TError = ErrorType<string>>(
 username: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersUsername>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersUsername>>,
          TError,
          Awaited<ReturnType<typeof getUsersUsername>>
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUsersUsername<TData = Awaited<ReturnType<typeof getUsersUsername>>, TError = ErrorType<string>>(
 username: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersUsername>>, TError, TData>>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetUsersUsername<TData = Awaited<ReturnType<typeof getUsersUsername>>, TError = ErrorType<string>>(
 username: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersUsername>>, TError, TData>>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUsersUsernameQueryOptions(username,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getUsersSearchUsernamePrefix = (
    usernamePrefix: string,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<UserProfile[]>(
      {url: `/Users/search/${usernamePrefix}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetUsersSearchUsernamePrefixQueryKey = (usernamePrefix: string,) => {
    return [`/Users/search/${usernamePrefix}`] as const;
    }

    
export const getGetUsersSearchUsernamePrefixQueryOptions = <TData = Awaited<ReturnType<typeof getUsersSearchUsernamePrefix>>, TError = ErrorType<unknown>>(usernamePrefix: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersSearchUsernamePrefix>>, TError, TData>>, request?: SecondParameter<typeof api>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersSearchUsernamePrefixQueryKey(usernamePrefix);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersSearchUsernamePrefix>>> = ({ signal }) => getUsersSearchUsernamePrefix(usernamePrefix, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(usernamePrefix), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUsersSearchUsernamePrefix>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUsersSearchUsernamePrefixQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersSearchUsernamePrefix>>>
export type GetUsersSearchUsernamePrefixQueryError = ErrorType<unknown>


export function useGetUsersSearchUsernamePrefix<TData = Awaited<ReturnType<typeof getUsersSearchUsernamePrefix>>, TError = ErrorType<unknown>>(
 usernamePrefix: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersSearchUsernamePrefix>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersSearchUsernamePrefix>>,
          TError,
          Awaited<ReturnType<typeof getUsersSearchUsernamePrefix>>
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUsersSearchUsernamePrefix<TData = Awaited<ReturnType<typeof getUsersSearchUsernamePrefix>>, TError = ErrorType<unknown>>(
 usernamePrefix: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersSearchUsernamePrefix>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersSearchUsernamePrefix>>,
          TError,
          Awaited<ReturnType<typeof getUsersSearchUsernamePrefix>>
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUsersSearchUsernamePrefix<TData = Awaited<ReturnType<typeof getUsersSearchUsernamePrefix>>, TError = ErrorType<unknown>>(
 usernamePrefix: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersSearchUsernamePrefix>>, TError, TData>>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetUsersSearchUsernamePrefix<TData = Awaited<ReturnType<typeof getUsersSearchUsernamePrefix>>, TError = ErrorType<unknown>>(
 usernamePrefix: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersSearchUsernamePrefix>>, TError, TData>>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUsersSearchUsernamePrefixQueryOptions(usernamePrefix,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getUsersMe = (
    
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<UserData>(
      {url: `/Users/me`, method: 'GET', signal
    },
      options);
    }
  

export const getGetUsersMeQueryKey = () => {
    return [`/Users/me`] as const;
    }

    
export const getGetUsersMeQueryOptions = <TData = Awaited<ReturnType<typeof getUsersMe>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersMe>>, TError, TData>>, request?: SecondParameter<typeof api>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersMeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersMe>>> = ({ signal }) => getUsersMe(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUsersMe>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUsersMeQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersMe>>>
export type GetUsersMeQueryError = ErrorType<unknown>


export function useGetUsersMe<TData = Awaited<ReturnType<typeof getUsersMe>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersMe>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersMe>>,
          TError,
          Awaited<ReturnType<typeof getUsersMe>>
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUsersMe<TData = Awaited<ReturnType<typeof getUsersMe>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersMe>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersMe>>,
          TError,
          Awaited<ReturnType<typeof getUsersMe>>
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUsersMe<TData = Awaited<ReturnType<typeof getUsersMe>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersMe>>, TError, TData>>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetUsersMe<TData = Awaited<ReturnType<typeof getUsersMe>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersMe>>, TError, TData>>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUsersMeQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postUsersEditProfile = (
    postUsersEditProfileBody: BodyType<PostUsersEditProfileBody>,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      const formData = new FormData();
if(postUsersEditProfileBody.FirstName !== undefined) {
 formData.append(`FirstName`, postUsersEditProfileBody.FirstName)
 }
if(postUsersEditProfileBody.LastName !== undefined) {
 formData.append(`LastName`, postUsersEditProfileBody.LastName)
 }
if(postUsersEditProfileBody.Username !== undefined) {
 formData.append(`Username`, postUsersEditProfileBody.Username)
 }
if(postUsersEditProfileBody.ContactUrl !== undefined) {
 formData.append(`ContactUrl`, postUsersEditProfileBody.ContactUrl)
 }
if(postUsersEditProfileBody.PhotoFile !== undefined) {
 formData.append(`PhotoFile`, postUsersEditProfileBody.PhotoFile)
 }

      return api<UserData>(
      {url: `/Users/editProfile`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData, signal
    },
      options);
    }
  


export const getPostUsersEditProfileMutationOptions = <TError = ErrorType<ValidationProblemDetails>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUsersEditProfile>>, TError,{data: BodyType<PostUsersEditProfileBody>}, TContext>, request?: SecondParameter<typeof api>}
): UseMutationOptions<Awaited<ReturnType<typeof postUsersEditProfile>>, TError,{data: BodyType<PostUsersEditProfileBody>}, TContext> => {

const mutationKey = ['postUsersEditProfile'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUsersEditProfile>>, {data: BodyType<PostUsersEditProfileBody>}> = (props) => {
          const {data} = props ?? {};

          return  postUsersEditProfile(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUsersEditProfileMutationResult = NonNullable<Awaited<ReturnType<typeof postUsersEditProfile>>>
    export type PostUsersEditProfileMutationBody = BodyType<PostUsersEditProfileBody>
    export type PostUsersEditProfileMutationError = ErrorType<ValidationProblemDetails>

    export const usePostUsersEditProfile = <TError = ErrorType<ValidationProblemDetails>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUsersEditProfile>>, TError,{data: BodyType<PostUsersEditProfileBody>}, TContext>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postUsersEditProfile>>,
        TError,
        {data: BodyType<PostUsersEditProfileBody>},
        TContext
      > => {

      const mutationOptions = getPostUsersEditProfileMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    