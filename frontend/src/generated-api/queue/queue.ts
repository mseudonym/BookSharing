/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * BS.Api | v1
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  PostQueueItemIdEnqueueParams
} from '.././model';

import { api } from '../../services/api';
import type { ErrorType } from '../../services/api';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const postQueueItemIdEnqueue = (
    itemId: string,
    params?: PostQueueItemIdEnqueueParams,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<void>(
      {url: `/Queue/${itemId}/enqueue`, method: 'POST',
        params, signal
    },
      options);
    }
  


export const getPostQueueItemIdEnqueueMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postQueueItemIdEnqueue>>, TError,{itemId: string;params?: PostQueueItemIdEnqueueParams}, TContext>, request?: SecondParameter<typeof api>}
): UseMutationOptions<Awaited<ReturnType<typeof postQueueItemIdEnqueue>>, TError,{itemId: string;params?: PostQueueItemIdEnqueueParams}, TContext> => {

const mutationKey = ['postQueueItemIdEnqueue'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postQueueItemIdEnqueue>>, {itemId: string;params?: PostQueueItemIdEnqueueParams}> = (props) => {
          const {itemId,params} = props ?? {};

          return  postQueueItemIdEnqueue(itemId,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostQueueItemIdEnqueueMutationResult = NonNullable<Awaited<ReturnType<typeof postQueueItemIdEnqueue>>>
    
    export type PostQueueItemIdEnqueueMutationError = ErrorType<unknown>

    export const usePostQueueItemIdEnqueue = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postQueueItemIdEnqueue>>, TError,{itemId: string;params?: PostQueueItemIdEnqueueParams}, TContext>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postQueueItemIdEnqueue>>,
        TError,
        {itemId: string;params?: PostQueueItemIdEnqueueParams},
        TContext
      > => {

      const mutationOptions = getPostQueueItemIdEnqueueMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const postQueueItemIdLeaveQueue = (
    itemId: string,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<void>(
      {url: `/Queue/${itemId}/leaveQueue`, method: 'POST', signal
    },
      options);
    }
  


export const getPostQueueItemIdLeaveQueueMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postQueueItemIdLeaveQueue>>, TError,{itemId: string}, TContext>, request?: SecondParameter<typeof api>}
): UseMutationOptions<Awaited<ReturnType<typeof postQueueItemIdLeaveQueue>>, TError,{itemId: string}, TContext> => {

const mutationKey = ['postQueueItemIdLeaveQueue'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postQueueItemIdLeaveQueue>>, {itemId: string}> = (props) => {
          const {itemId} = props ?? {};

          return  postQueueItemIdLeaveQueue(itemId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostQueueItemIdLeaveQueueMutationResult = NonNullable<Awaited<ReturnType<typeof postQueueItemIdLeaveQueue>>>
    
    export type PostQueueItemIdLeaveQueueMutationError = ErrorType<unknown>

    export const usePostQueueItemIdLeaveQueue = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postQueueItemIdLeaveQueue>>, TError,{itemId: string}, TContext>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postQueueItemIdLeaveQueue>>,
        TError,
        {itemId: string},
        TContext
      > => {

      const mutationOptions = getPostQueueItemIdLeaveQueueMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const postQueueItemIdBecomeHolder = (
    itemId: string,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<void>(
      {url: `/Queue/${itemId}/becomeHolder`, method: 'POST', signal
    },
      options);
    }
  


export const getPostQueueItemIdBecomeHolderMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postQueueItemIdBecomeHolder>>, TError,{itemId: string}, TContext>, request?: SecondParameter<typeof api>}
): UseMutationOptions<Awaited<ReturnType<typeof postQueueItemIdBecomeHolder>>, TError,{itemId: string}, TContext> => {

const mutationKey = ['postQueueItemIdBecomeHolder'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postQueueItemIdBecomeHolder>>, {itemId: string}> = (props) => {
          const {itemId} = props ?? {};

          return  postQueueItemIdBecomeHolder(itemId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostQueueItemIdBecomeHolderMutationResult = NonNullable<Awaited<ReturnType<typeof postQueueItemIdBecomeHolder>>>
    
    export type PostQueueItemIdBecomeHolderMutationError = ErrorType<unknown>

    export const usePostQueueItemIdBecomeHolder = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postQueueItemIdBecomeHolder>>, TError,{itemId: string}, TContext>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postQueueItemIdBecomeHolder>>,
        TError,
        {itemId: string},
        TContext
      > => {

      const mutationOptions = getPostQueueItemIdBecomeHolderMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    