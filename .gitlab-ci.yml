stages:
  - test
  - build
  - deploy


test-backend:
  stage: test
  image: mcr.microsoft.com/dotnet/sdk:9.0
  services:
    - name: postgres:17
      alias: postgres
  variables:
    POSTGRES_DB: bs_test
    POSTGRES_USER: bs_user
    POSTGRES_PASSWORD: bs_password
    BS_API__ConnectionStringsOptions__Postgres: "Host=postgres;Port=5432;Database=bs_test;Username=bs_user;Password=bs_password"
  before_script:
    - cd backend
    - dotnet tool restore
    - dotnet ef database update --connection "$BS_API__ConnectionStringsOptions__Postgres" --project BS.Data --startup-project BS.Api
  script:
    - cd BS.IntegrationTests
    - dotnet restore
    - dotnet test --verbosity normal
  rules:
    - changes:
        - backend/**
    - when: manual


variables:
  BS_API_IMAGE: "$CI_REGISTRY_IMAGE/bs-api:$CI_COMMIT_SHORT_SHA"
  BS_APP_IMAGE: "$CI_REGISTRY_IMAGE/bs-app:$CI_COMMIT_SHORT_SHA"

build-backend:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker build -t $BS_API_IMAGE -f backend/BS.Api/Dockerfile backend/
    - docker push $BS_API_IMAGE
  needs:
    - job: test-backend
  rules:
    - when: manual


build-frontend:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker build -t $BS_APP_IMAGE -f frontend/Dockerfile frontend/
    - docker push $BS_APP_IMAGE
  rules:
    - when: manual


.deploy-template:
  image:
    name: bitnami/kubectl:latest
    entrypoint: [ "" ]
  before_script:
    - echo "Настраиваем доступ к кластеру..."
    - echo "$KUBECONFIG_BASE64" | base64 -d > kubeconfig
    - export KUBECONFIG=$PWD/kubeconfig
    - echo "Применяем ingress..."
    - envsubst < k8s/${CI_ENVIRONMENT_NAME}-ingress.yaml | kubectl apply -n $CI_ENVIRONMENT_NAME -f -


staging-deploy-backend:
  stage: deploy
  extends: .deploy-template
  environment:
    name: staging
  script:
  - echo "Генерируем и применяем секреты..."
  - envsubst < k8s/bs-api-secrets.yaml | kubectl apply -n staging -f -
  - echo "Применяем Deployment..."
  - envsubst < k8s/backend-deployment.yaml | kubectl apply -n staging -f -
  - kubectl rollout restart deployment bs-api -n staging
  - kubectl rollout status deployment bs-api -n production --timeout=120s
  variables:
    ASPNETCORE_ENVIRONMENT: "Staging"
  when: manual
  needs:
    - job: build-backend


staging-deploy-frontend:
  stage: deploy
  extends: .deploy-template
  environment:
    name: staging
  script:
    - echo "Применяем Deployment..."
    - envsubst < k8s/frontend-deployment.yaml | kubectl apply -n staging -f -
    - kubectl rollout restart deployment bs-app -n staging
    - kubectl rollout status deployment bs-app -n staging --timeout=120s
  when: manual
  needs:
    - job: build-frontend


production-deploy-backend:
  stage: deploy
  extends: .deploy-template
  environment:
    name: production
  script:
    - echo "Генерируем и применяем секреты..."
    - envsubst < k8s/bs-api-secrets.yaml | kubectl apply -n production -f -
    - echo "Применяем Deployment..."
    - envsubst < k8s/backend-deployment.yaml | kubectl apply -n production -f -
    - kubectl rollout restart deployment bs-api -n production
    - kubectl rollout status deployment bs-api -n production --timeout=120s
  variables:
    ASPNETCORE_ENVIRONMENT: "Production"
  when: manual
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: manual
  needs:
    - job: build-backend
