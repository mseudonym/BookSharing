stages:
  - test
  - build
  - staging
  - production

#test-backend:
#  stage: test
#  image: mcr.microsoft.com/dotnet/sdk:9.0
#  script:
#    - cd backend/BS.IntegrationTests
#    - dotnet restore
#    - dotnet test --verbosity normal

variables:
  BS_API_IMAGE: "$CI_REGISTRY_IMAGE/bs-api:$CI_COMMIT_SHORT_SHA"

build-backend:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker build -t $BS_API_IMAGE -f backend/BS.Api/Dockerfile backend/
    - docker push $BS_API_IMAGE

staging-deploy-backend:
  stage: staging
  image: 
    name: bitnami/kubectl:latest
    entrypoint: [ "" ]
  environment:
    name: staging
  script:
    - echo "$BS_API_PFX_BASE64" | base64 -d > bs-api-stage.pfx
    
    - echo "$KUBECONFIG_BASE64" | base64 -d > kubeconfig
    - export KUBECONFIG=$PWD/kubeconfig

    - kubectl delete secret bs-cert --ignore-not-found
    - kubectl create secret generic bs-cert --from-literal=cert-pass="$CERT_PASS" --from-file=bs-api-stage.pfx=bs-api-stage.pfx
    
    - kubectl apply -f k8s/staging-backend-deployment.yaml
    - kubectl set image deployment/staging-bs-api staging-bs-api=$BS_API_IMAGE

  variables:
    ASPNETCORE_ENVIRONMENT: "Staging"
  when: manual
  only:
    - branches
    - tags

production-deploy-backend:
  stage: production
  image:
    name: bitnami/kubectl:latest
    entrypoint: [ "" ]
  environment:
    name: production
  script:
    - echo "$BS_API_PFX_BASE64" | base64 -d > bs-api-stage.pfx
    - |
      kubectl create secret generic bs-cert \
        --from-literal=cert-pass="$CERT_PASS" \
        --from-file=bs-api-stage.pfx=bs-api-stage.pfx
    - kubectl apply -f k8s/production-backend-deployment.yaml
  variables:
    ASPNETCORE_ENVIRONMENT: "Production"
  when: manual
  only:
    - main
