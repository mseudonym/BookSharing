stages:
  - test
  - build
  - deploy

test-backend:
  stage: test
  image: mcr.microsoft.com/dotnet/sdk:9.0
  environment:
    name: testing
  before_script:
    - echo "$KUBECONFIG_BASE64" | base64 -d > kubeconfig
    - export KUBECONFIG=$PWD/kubeconfig
    # Устанавливаем kubectl
    - KUBECTL_VERSION=$(curl -s https://dl.k8s.io/release/stable.txt)
    - curl -LO "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
    - chmod +x kubectl && mv kubectl /usr/local/bin/
    # Пробрасываем порт PostgreSQL (5432) из Kubernetes-сервиса наружу
    - kubectl port-forward svc/bs-postgres-0 5432:5433 &
    # Сохраняем PID процесса для последующего завершения
    - PORT_FORWARD_PID=$!
    # Ждём несколько секунд, чтобы проброс точно поднялся
    - sleep 5
    # Применяем миграции
    - cd backend
    - dotnet ef database update --connection "$BS_API__ConnectionStringsOptions__Postgres" --project BS.Data --startup-project BS.Api
  script:
    - cd backend/BS.IntegrationTests
    # Восстанавливаем зависимости
    - dotnet restore
    # Запускаем тесты
    - dotnet test --verbosity normal
  after_script:
    - kill $PORT_FORWARD_PID || true

variables:
  BS_API_IMAGE: "$CI_REGISTRY_IMAGE/bs-api:$CI_COMMIT_SHORT_SHA"
  BS_APP_IMAGE: "$CI_REGISTRY_IMAGE/bs-app:$CI_COMMIT_SHORT_SHA"

build-backend:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker build -t $BS_API_IMAGE -f backend/BS.Api/Dockerfile backend/
    - docker push $BS_API_IMAGE

build-frontend:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker build -t $BS_APP_IMAGE -f frontend/Dockerfile frontend/
    - docker push $BS_APP_IMAGE

staging-deploy-backend:
  stage: deploy
  image: 
    name: bitnami/kubectl:latest
    entrypoint: [ "" ]
  environment:
    name: staging
  script:
  - echo "Применяем конфиг подключения к кластеру K8S..."
  - echo "$KUBECONFIG_BASE64" | base64 -d > kubeconfig && export KUBECONFIG=$PWD/kubeconfig
  - echo "Применяем ingress стейджинга..."
  - envsubst < k8s/staging-ingress.yaml | kubectl apply -n staging -f -
  - echo "Генерируем и применяем секреты..."
  - envsubst < k8s/bs-api-secrets.yaml | kubectl apply -n staging -f -
  - echo "Применяем Deployment..."
  - envsubst < k8s/backend-deployment.yaml | kubectl apply -n staging -f -
  - kubectl rollout restart deployment bs-api -n staging
  variables:
    ASPNETCORE_ENVIRONMENT: "Staging"
  when: manual
  only:
    - branches
  needs:
    - job: build-backend


staging-deploy-frontend:
  stage: deploy
  image:
    name: bitnami/kubectl:latest
    entrypoint: [ "" ]
  environment:
    name: staging
  script:
    - echo "Применяем конфиг подключения к кластеру K8S..."
    - echo "$KUBECONFIG_BASE64" | base64 -d > kubeconfig
    - export KUBECONFIG=$PWD/kubeconfig
    - echo "Применяем ingress стейджинга..."
    - envsubst < k8s/staging-ingress.yaml | kubectl apply -n staging -f -
    - echo "Применяем Deployment..."
    - envsubst < k8s/frontend-deployment.yaml | kubectl apply -n staging -f -
    - kubectl rollout restart deployment bs-app -n staging
  when: manual
  only:
    - branches
  needs:
    - job: build-frontend


production-deploy-backend:
  stage: deploy
  image:
    name: bitnami/kubectl:latest
    entrypoint: [ "" ]
  environment:
    name: production
  script:
    - echo "Применяем конфиг подключения к кластеру K8S..."
    - echo "$KUBECONFIG_BASE64" | base64 -d > kubeconfig && export KUBECONFIG=$PWD/kubeconfig
    - echo "Применяем ingress..."
    - envsubst < k8s/production-ingress.yaml | kubectl apply -n production -f -
    - echo "Генерируем и применяем секреты..."
    - envsubst < k8s/bs-api-secrets.yaml | kubectl apply -n production -f -
    - echo "Применяем Deployment..."
    - envsubst < k8s/backend-deployment.yaml | kubectl apply -n production -f -
    - kubectl rollout restart deployment bs-api -n production
  variables:
    ASPNETCORE_ENVIRONMENT: "Production"
  when: manual
  only:
    - main
  needs:
    - job: build-backend
