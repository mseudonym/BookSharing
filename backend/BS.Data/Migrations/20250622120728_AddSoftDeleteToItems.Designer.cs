// <auto-generated />
using System;
using BS.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BS.Data.Migrations
{
    [DbContext(typeof(BookSharingContext))]
    [Migration("20250622120728_AddSoftDeleteToItems")]
    partial class AddSoftDeleteToItems
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BS.Data.Entities.BookEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsAddedByUser")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPhotoUploaded")
                        .HasColumnType("boolean");

                    b.Property<string>("Isbn")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("PublicationYear")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Books", (string)null);
                });

            modelBuilder.Entity("BS.Data.Entities.ItemEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("HolderChangedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("HolderId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("HolderId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Items", (string)null);
                });

            modelBuilder.Entity("BS.Data.Entities.Notifications.Base.NotificationBaseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<int>("NotificationType")
                        .HasMaxLength(100)
                        .HasColumnType("integer")
                        .HasColumnName("NotificationType");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ShouldBeSentAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsRead");

                    b.HasIndex("NotificationType");

                    b.HasIndex("RecipientId");

                    b.HasIndex("ShouldBeSentAt");

                    b.ToTable("Notifications", (string)null);

                    b.HasDiscriminator<int>("NotificationType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BS.Data.Entities.QueueItemEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EnqueueTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsForcedFirstByOwner")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("ItemId", "EnqueueTimeUtc")
                        .IsUnique();

                    b.ToTable("QueueItems", (string)null);
                });

            modelBuilder.Entity("BS.Data.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("ContactUrl")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsProfileFilled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsProfilePhotoUploaded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("UserEntityUserEntity", b =>
                {
                    b.Property<Guid>("FriendsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("FriendsId", "UserEntityId");

                    b.HasIndex("UserEntityId");

                    b.ToTable("UserFriends", (string)null);
                });

            modelBuilder.Entity("UserEntityUserEntity1", b =>
                {
                    b.Property<Guid>("ReceivedFriendRequestsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SentFriendRequestsId")
                        .HasColumnType("uuid");

                    b.HasKey("ReceivedFriendRequestsId", "SentFriendRequestsId");

                    b.HasIndex("SentFriendRequestsId");

                    b.ToTable("FriendRequests", (string)null);
                });

            modelBuilder.Entity("BS.Data.Entities.Notifications.Base.ItemNotificationBaseEntity", b =>
                {
                    b.HasBaseType("BS.Data.Entities.Notifications.Base.NotificationBaseEntity");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.HasIndex("ItemId");
                });

            modelBuilder.Entity("BS.Data.Entities.Notifications.FriendUpdate.FriendUpdatesNotificationBaseEntity", b =>
                {
                    b.HasBaseType("BS.Data.Entities.Notifications.Base.NotificationBaseEntity");

                    b.Property<Guid>("FriendId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uuid")
                        .HasColumnName("PersonId");

                    b.HasIndex("FriendId");
                });

            modelBuilder.Entity("BS.Data.Entities.Notifications.Friendship.FriendshipStatusChangedNotificationEntity", b =>
                {
                    b.HasBaseType("BS.Data.Entities.Notifications.Base.NotificationBaseEntity");

                    b.Property<int>("NewStatus")
                        .HasColumnType("integer");

                    b.Property<Guid>("PersonId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uuid")
                        .HasColumnName("PersonId");

                    b.HasIndex("PersonId");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("BS.Data.Entities.Notifications.Items.SomeoneBecameHolderOfYourItemNotificationEntity", b =>
                {
                    b.HasBaseType("BS.Data.Entities.Notifications.Base.ItemNotificationBaseEntity");

                    b.Property<Guid>("NewHolderId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uuid")
                        .HasColumnName("PersonId");

                    b.HasIndex("NewHolderId");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("BS.Data.Entities.Notifications.Items.SomeoneQueueToItemNotificationEntity", b =>
                {
                    b.HasBaseType("BS.Data.Entities.Notifications.Base.ItemNotificationBaseEntity");

                    b.Property<Guid>("NewQueueMemberId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uuid")
                        .HasColumnName("PersonId");

                    b.HasIndex("NewQueueMemberId");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("BS.Data.Entities.Notifications.Items.YourQueuePositionChangedNotificationEntity", b =>
                {
                    b.HasBaseType("BS.Data.Entities.Notifications.Base.ItemNotificationBaseEntity");

                    b.Property<int>("NewPosition")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue(5);
                });

            modelBuilder.Entity("BS.Data.Entities.Notifications.Reminders.ReadingProgressReminderNotificationEntity", b =>
                {
                    b.HasBaseType("BS.Data.Entities.Notifications.Base.ItemNotificationBaseEntity");

                    b.Property<int>("ReadingDays")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue(6);
                });

            modelBuilder.Entity("BS.Data.Entities.Notifications.FriendUpdate.FriendTakeBookToReadNotificationEntity", b =>
                {
                    b.HasBaseType("BS.Data.Entities.Notifications.FriendUpdate.FriendUpdatesNotificationBaseEntity");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.HasIndex("BookId");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("BS.Data.Entities.Notifications.FriendUpdate.NewBooksInFriendShelfNotificationEntity", b =>
                {
                    b.HasBaseType("BS.Data.Entities.Notifications.FriendUpdate.FriendUpdatesNotificationBaseEntity");

                    b.Property<string>("NewBookIds")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("BS.Data.Entities.ItemEntity", b =>
                {
                    b.HasOne("BS.Data.Entities.BookEntity", "Book")
                        .WithMany("Items")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BS.Data.Entities.UserEntity", "Holder")
                        .WithMany()
                        .HasForeignKey("HolderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BS.Data.Entities.UserEntity", "Owner")
                        .WithMany("Items")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Holder");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("BS.Data.Entities.Notifications.Base.NotificationBaseEntity", b =>
                {
                    b.HasOne("BS.Data.Entities.UserEntity", "Recipient")
                        .WithMany("Notifications")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("BS.Data.Entities.QueueItemEntity", b =>
                {
                    b.HasOne("BS.Data.Entities.ItemEntity", "Item")
                        .WithMany("QueueItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BS.Data.Entities.UserEntity", "User")
                        .WithMany("QueueItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("BS.Data.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("BS.Data.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BS.Data.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("BS.Data.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserEntityUserEntity", b =>
                {
                    b.HasOne("BS.Data.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("FriendsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BS.Data.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserEntityUserEntity1", b =>
                {
                    b.HasOne("BS.Data.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("ReceivedFriendRequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BS.Data.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("SentFriendRequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BS.Data.Entities.Notifications.Base.ItemNotificationBaseEntity", b =>
                {
                    b.HasOne("BS.Data.Entities.ItemEntity", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("BS.Data.Entities.Notifications.FriendUpdate.FriendUpdatesNotificationBaseEntity", b =>
                {
                    b.HasOne("BS.Data.Entities.UserEntity", "Friend")
                        .WithMany()
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Friend");
                });

            modelBuilder.Entity("BS.Data.Entities.Notifications.Friendship.FriendshipStatusChangedNotificationEntity", b =>
                {
                    b.HasOne("BS.Data.Entities.UserEntity", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("BS.Data.Entities.Notifications.Items.SomeoneBecameHolderOfYourItemNotificationEntity", b =>
                {
                    b.HasOne("BS.Data.Entities.UserEntity", "NewHolder")
                        .WithMany()
                        .HasForeignKey("NewHolderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("NewHolder");
                });

            modelBuilder.Entity("BS.Data.Entities.Notifications.Items.SomeoneQueueToItemNotificationEntity", b =>
                {
                    b.HasOne("BS.Data.Entities.UserEntity", "NewQueueMember")
                        .WithMany()
                        .HasForeignKey("NewQueueMemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("NewQueueMember");
                });

            modelBuilder.Entity("BS.Data.Entities.Notifications.FriendUpdate.FriendTakeBookToReadNotificationEntity", b =>
                {
                    b.HasOne("BS.Data.Entities.BookEntity", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BS.Data.Entities.BookEntity", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("BS.Data.Entities.ItemEntity", b =>
                {
                    b.Navigation("QueueItems");
                });

            modelBuilder.Entity("BS.Data.Entities.UserEntity", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Notifications");

                    b.Navigation("QueueItems");
                });
#pragma warning restore 612, 618
        }
    }
}
